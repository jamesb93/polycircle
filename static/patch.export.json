{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeBang",
        "index": 0,
        "name": "message_01_bangval",
        "paramId": "s/message_obj-39/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      },
      {
        "type": "ParameterTypeBang",
        "index": 1,
        "name": "message_02_bangval",
        "paramId": "s[1]/message_obj-39/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      },
      {
        "type": "ParameterTypeBang",
        "index": 2,
        "name": "message_03_bangval",
        "paramId": "s[2]/message_obj-39/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      },
      {
        "type": "ParameterTypeBang",
        "index": 3,
        "name": "message_04_bangval",
        "paramId": "s[3]/message_obj-39/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      },
      {
        "type": "ParameterTypeBang",
        "index": 4,
        "name": "message_05_bangval",
        "paramId": "s[4]/message_obj-39/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      }
    ],
    "numParameters": 5,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 1,
    "numMidiInputPorts": 0,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "rate",
        "meta": ""
      },
      {
        "tag": "r1",
        "meta": ""
      },
      {
        "tag": "r2",
        "meta": ""
      },
      {
        "tag": "r3",
        "meta": ""
      },
      {
        "tag": "r4",
        "meta": ""
      }
    ],
    "outports": [
      {
        "tag": "phasors",
        "meta": ""
      }
    ],
    "inlets": [],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_01": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_02": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_03": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_04": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_05": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_06": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_07": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_08": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_09": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "patch.maxpat",
      "maxversion": "8.5.2",
      "rnboversion": "1.1.0-jby-rnbo-what"
    }
  },
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "denorm": {},
          "denorm[1]": {},
          "denorm[2]": {},
          "denorm[3]": {},
          "s": {},
          "s[1]": {},
          "s[2]": {},
          "s[3]": {},
          "s[4]": {}
        }
      }
    }
  ],
  "src": [
    {
      "code": "\nclass RNBOSubpatcher_1093 {\n\tconstructor() {\n\t\tthis.dspexpr_01_in1 = 0;\n\t\tthis.dspexpr_01_in2 = 0;\n\t\tthis.curve_01_dest = [];\n\t\tthis.curve_01_time = 0;\n\t\tthis.curve_01_curve = 0;\n\t\tthis.cycle_tilde_01_frequency = 220;\n\t\tthis.cycle_tilde_01_phase_offset = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(2);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.curve_01_activeRamps = [];\n\t\tthis.curve_01_currentValue = 0;\n\t\tthis.curve_01_samplecount = 0;\n\t\tthis.curve_01_startvalue = 0;\n\t\tthis.cycle_tilde_01_buffer = 0;\n\t\tthis.cycle_tilde_01_wrap = 0;\n\t\tthis.cycle_tilde_01_phasei = 0;\n\t\tthis.cycle_tilde_01_f2i = 0;\n\t\tthis.cycle_tilde_01_ph_currentPhase = 0;\n\t\tthis.cycle_tilde_01_ph_conv = 0;\n\t\tthis.cycle_tilde_01_setupDone = false;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tcurrentsampletime() {\n\t    return this.audioProcessSampleCount + this.sampleOffsetIntoNextAudioBuffer;\n\t}\n\tmstosamps(ms) {\n\t    return ms * this.sr * 0.001;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\teventinlet_01_out1_number_set(v) {\n\t    this.message_01_bangval_bang();\n\t}\n\teventinlet_01_out1_list_set(v) {\n\t    this.message_01_bangval_bang();\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tcurve_01_target_bang() {}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.curve_01_perform(this.signals[0], n);\n\t\n\t    this.cycle_tilde_01_perform(\n\t        this.cycle_tilde_01_frequency,\n\t        this.cycle_tilde_01_phase_offset,\n\t        this.signals[1],\n\t        this.dummyBuffer,\n\t        n\n\t    );\n\t\n\t    this.dspexpr_01_perform(this.signals[0], this.signals[1], out1, n);\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 2; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxBlockSize);\n\t        }\n\t\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    this.cycle_tilde_01_dspsetup(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {\n\t    RNBO_UNUSED(v);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 0:\n\t        this.message_01_bangval_bang();\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 1;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"message_01_bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"s/message_obj-39/bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        case 0:\n\t            info.type = ParameterTypeBang;\n\t            info.initialValue = 0;\n\t            info.min = 0;\n\t            info.max = 1;\n\t            info.exponent = 1;\n\t            info.steps = 0;\n\t            info.debug = false;\n\t            info.saveable = true;\n\t            info.transmittable = true;\n\t            info.initialized = false;\n\t            info.visible = false;\n\t            info.displayName = \"\";\n\t            info.unit = \"\";\n\t            info.ioType = IOTypeUndefined;\n\t            info.signalIndex = INVALID_INDEX;\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    RNBO_UNUSED(value);\n\t    RNBO_UNUSED(hasValue);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 861222235:\n\t        this.curve_01_target_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    if (index == 0) {\n\t        this.cycle_tilde_01_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t        this.cycle_tilde_01_bufferUpdated();\n\t    }\n\t}\n\tallocateDataRefs() {\n\t    this.cycle_tilde_01_buffer.requestSize(16384, 1);\n\t    this.cycle_tilde_01_buffer.setSampleRate(this.sr);\n\t    this.cycle_tilde_01_buffer = this.cycle_tilde_01_buffer.allocateIfNeeded();\n\t}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t    this.cycle_tilde_01_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t}\n\tcurve_01_dest_set(v) {\n\t    this.curve_01_dest = jsCreateListCopy(v);\n\t\n\t    if ((v.length)) {\n\t        const RFACTOR = 1 / 0.23;\n\t        const PFACTOR = 5;\n\t        const DIV_RFACTOR = 1 / (rnbo_exp(RFACTOR) - 1.);\n\t        let currentTime = this.currentsampletime();\n\t        let lastRampEnd = currentTime;\n\t        let lastRampValue = this.curve_01_currentValue;\n\t        let rampEnd = currentTime - this.sampleOffsetIntoNextAudioBuffer;\n\t        this.curve_01_samplecount = 0;\n\t        this.curve_01_startvalue = this.curve_01_currentValue;\n\t\n\t        for (let i = 0; i < this.curve_01_activeRamps.length; i += 4) {\n\t            rampEnd = this.curve_01_activeRamps[i + 1];\n\t\n\t            if (rampEnd > currentTime) {\n\t                this.curve_01_activeRamps[i] = lastRampValue;\n\t                this.curve_01_activeRamps[i + 1] = currentTime;\n\t                this.curve_01_activeRamps.length = i + 4;\n\t                rampEnd = currentTime;\n\t            }\n\t        }\n\t\n\t        if (rampEnd < currentTime) {\n\t            this.curve_01_activeRamps.push(lastRampValue);\n\t            this.curve_01_activeRamps.push(currentTime);\n\t            this.curve_01_activeRamps.push(0);\n\t            this.curve_01_activeRamps.push(0);\n\t        }\n\t\n\t        for (let i = 0; i < v.length; i += 3) {\n\t            let destinationValue = v[i];\n\t            let rampTimeInSamples;\n\t            let curveFactor;\n\t\n\t            if (v.length > i + 1) {\n\t                rampTimeInSamples = this.mstosamps(v[i + 1]);\n\t            } else {\n\t                rampTimeInSamples = this.mstosamps(this.curve_01_time);\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0)\n\t                rampTimeInSamples = 1;\n\t\n\t            if (v.length > i + 2)\n\t                curveFactor = v[i + 2];\n\t            else\n\t                curveFactor = this.curve_01_curve;\n\t\n\t            let f = 1 - rnbo_abs(curveFactor);\n\t            let p = ((curveFactor >= 0. ? 1 : -1)) * PFACTOR * (rnbo_exp(f * RFACTOR) - 1.) * DIV_RFACTOR;\n\t            p = fixdenorm(p);\n\t            let div_erp = 1 / (rnbo_exp(1 / p) - 1.);\n\t            let div_durp = 1 / (rampTimeInSamples * p);\n\t            lastRampEnd += rampTimeInSamples;\n\t            this.curve_01_activeRamps.push(destinationValue);\n\t            this.curve_01_activeRamps.push(lastRampEnd);\n\t            this.curve_01_activeRamps.push(div_erp);\n\t            this.curve_01_activeRamps.push(div_durp);\n\t            lastRampValue = destinationValue;\n\t        }\n\t    }\n\t}\n\tmessage_01_out_set(v) {\n\t    this.curve_01_dest_set(v);\n\t}\n\tmessage_01_bangval_bang() {\n\t    this.sendParameter(0, true);\n\t    this.message_01_out_set([1, 1, 0.5, 0, 1000, -0.5]);\n\t}\n\teventinlet_01_out1_bang_bang() {\n\t    this.message_01_bangval_bang();\n\t}\n\tcurve_01_perform(out, n) {\n\t    var __curve_01_startvalue = this.curve_01_startvalue;\n\t    var __curve_01_samplecount = this.curve_01_samplecount;\n\t    var __curve_01_currentValue = this.curve_01_currentValue;\n\t    let i = 0;\n\t\n\t    if ((this.curve_01_activeRamps.length)) {\n\t        while ((this.curve_01_activeRamps.length) && i < n) {\n\t            let destinationValue = this.curve_01_activeRamps[0];\n\t            let rampTimeInSamples = this.curve_01_activeRamps[1] - this.audioProcessSampleCount - i;\n\t            let val = __curve_01_currentValue;\n\t            let div_erp = this.curve_01_activeRamps[2];\n\t            let div_durp = this.curve_01_activeRamps[3];\n\t\n\t            while (rampTimeInSamples > 0 && i < n) {\n\t                let curv = (rnbo_exp(__curve_01_samplecount * div_durp) - 1) * div_erp;\n\t                val += __curve_01_startvalue - val + curv * (destinationValue - __curve_01_startvalue);\n\t                out[i] = val;\n\t                i++;\n\t                __curve_01_samplecount++;\n\t                rampTimeInSamples--;\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0) {\n\t                __curve_01_samplecount = 0;\n\t                val = destinationValue;\n\t                __curve_01_startvalue = val;\n\t                this.curve_01_activeRamps.splice(0, 4);\n\t\n\t                if ((!(this.curve_01_activeRamps.length)))\n\t                    this.getEngine().scheduleClockEventWithValue(this, 861222235, this.sampsToMs((this.vs)) + this._currentTime, 0);;\n\t            }\n\t\n\t            __curve_01_currentValue = val;\n\t        }\n\t    }\n\t\n\t    while (i < n) {\n\t        out[i] = __curve_01_currentValue;\n\t        i++;\n\t    }\n\t\n\t    this.curve_01_currentValue = __curve_01_currentValue;\n\t    this.curve_01_samplecount = __curve_01_samplecount;\n\t    this.curve_01_startvalue = __curve_01_startvalue;\n\t}\n\tcycle_tilde_01_perform(frequency, phase_offset, out1, out2, n) {\n\t    var __cycle_tilde_01_f2i = this.cycle_tilde_01_f2i;\n\t    var __cycle_tilde_01_phasei = this.cycle_tilde_01_phasei;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        {\n\t            let uint_phase;\n\t\n\t            {\n\t                {\n\t                    uint_phase = __cycle_tilde_01_phasei;\n\t                }\n\t            }\n\t\n\t            let idx = (uint32_rshift(uint_phase, 18));\n\t            let frac = (uint_phase & 262143) * 3.81471181759574e-6;\n\t            let y0 = this.cycle_tilde_01_buffer[idx];\n\t            let y1 = this.cycle_tilde_01_buffer[idx + 1 & 16383];\n\t            let y = y0 + frac * (y1 - y0);\n\t\n\t            {\n\t                let pincr = (uint32_trunc(220 * __cycle_tilde_01_f2i));\n\t                __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);\n\t            }\n\t\n\t            out1[i] = y;\n\t            out2[i] = uint_phase * 0.232830643653869629e-9;\n\t            continue;\n\t        }\n\t    }\n\t\n\t    this.cycle_tilde_01_phasei = __cycle_tilde_01_phasei;\n\t}\n\tdspexpr_01_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * in2[i];//#map:_###_obj_###_:1\n\t    }\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tcycle_tilde_01_ph_next(freq, reset) {\n\t    {\n\t        {\n\t            if (reset >= 0.)\n\t                this.cycle_tilde_01_ph_currentPhase = reset;\n\t        }\n\t    }\n\t\n\t    const pincr = freq * this.cycle_tilde_01_ph_conv;\n\t\n\t    if (this.cycle_tilde_01_ph_currentPhase < 0.)\n\t        this.cycle_tilde_01_ph_currentPhase = 1. + this.cycle_tilde_01_ph_currentPhase;\n\t\n\t    if (this.cycle_tilde_01_ph_currentPhase > 1.)\n\t        this.cycle_tilde_01_ph_currentPhase = this.cycle_tilde_01_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.cycle_tilde_01_ph_currentPhase;\n\t    this.cycle_tilde_01_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tcycle_tilde_01_ph_reset() {\n\t    this.cycle_tilde_01_ph_currentPhase = 0;\n\t}\n\tcycle_tilde_01_ph_dspsetup() {\n\t    this.cycle_tilde_01_ph_conv = 1 / this.sr;\n\t}\n\tcycle_tilde_01_dspsetup(force) {\n\t    if ((this.cycle_tilde_01_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.cycle_tilde_01_phasei = 0;\n\t    this.cycle_tilde_01_f2i = 4294967296 / this.samplerate();\n\t    this.cycle_tilde_01_wrap = (this.cycle_tilde_01_buffer.getSize()) - 1;\n\t    this.cycle_tilde_01_setupDone = true;\n\t    this.cycle_tilde_01_ph_dspsetup();\n\t}\n\tcycle_tilde_01_bufferUpdated() {\n\t    this.cycle_tilde_01_wrap = (this.cycle_tilde_01_buffer.getSize()) - 1;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1094 {\n\tconstructor() {\n\t\tthis.dspexpr_02_in1 = 0;\n\t\tthis.dspexpr_02_in2 = 0;\n\t\tthis.curve_02_dest = [];\n\t\tthis.curve_02_time = 0;\n\t\tthis.curve_02_curve = 0;\n\t\tthis.cycle_tilde_02_frequency = 330;\n\t\tthis.cycle_tilde_02_phase_offset = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(2);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.curve_02_activeRamps = [];\n\t\tthis.curve_02_currentValue = 0;\n\t\tthis.curve_02_samplecount = 0;\n\t\tthis.curve_02_startvalue = 0;\n\t\tthis.cycle_tilde_02_buffer = 0;\n\t\tthis.cycle_tilde_02_wrap = 0;\n\t\tthis.cycle_tilde_02_phasei = 0;\n\t\tthis.cycle_tilde_02_f2i = 0;\n\t\tthis.cycle_tilde_02_ph_currentPhase = 0;\n\t\tthis.cycle_tilde_02_ph_conv = 0;\n\t\tthis.cycle_tilde_02_setupDone = false;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tcurrentsampletime() {\n\t    return this.audioProcessSampleCount + this.sampleOffsetIntoNextAudioBuffer;\n\t}\n\tmstosamps(ms) {\n\t    return ms * this.sr * 0.001;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\teventinlet_02_out1_number_set(v) {\n\t    this.message_02_bangval_bang();\n\t}\n\teventinlet_02_out1_list_set(v) {\n\t    this.message_02_bangval_bang();\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tcurve_02_target_bang() {}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.curve_02_perform(this.signals[0], n);\n\t\n\t    this.cycle_tilde_02_perform(\n\t        this.cycle_tilde_02_frequency,\n\t        this.cycle_tilde_02_phase_offset,\n\t        this.signals[1],\n\t        this.dummyBuffer,\n\t        n\n\t    );\n\t\n\t    this.dspexpr_02_perform(this.signals[0], this.signals[1], out1, n);\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 2; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxBlockSize);\n\t        }\n\t\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    this.cycle_tilde_02_dspsetup(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {\n\t    RNBO_UNUSED(v);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 0:\n\t        this.message_02_bangval_bang();\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 1;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"message_02_bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"s[1]/message_obj-39/bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        case 0:\n\t            info.type = ParameterTypeBang;\n\t            info.initialValue = 0;\n\t            info.min = 0;\n\t            info.max = 1;\n\t            info.exponent = 1;\n\t            info.steps = 0;\n\t            info.debug = false;\n\t            info.saveable = true;\n\t            info.transmittable = true;\n\t            info.initialized = false;\n\t            info.visible = false;\n\t            info.displayName = \"\";\n\t            info.unit = \"\";\n\t            info.ioType = IOTypeUndefined;\n\t            info.signalIndex = INVALID_INDEX;\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    RNBO_UNUSED(value);\n\t    RNBO_UNUSED(hasValue);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 861222235:\n\t        this.curve_02_target_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    if (index == 0) {\n\t        this.cycle_tilde_02_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t        this.cycle_tilde_02_bufferUpdated();\n\t    }\n\t}\n\tallocateDataRefs() {\n\t    this.cycle_tilde_02_buffer.requestSize(16384, 1);\n\t    this.cycle_tilde_02_buffer.setSampleRate(this.sr);\n\t    this.cycle_tilde_02_buffer = this.cycle_tilde_02_buffer.allocateIfNeeded();\n\t}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t    this.cycle_tilde_02_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t}\n\tcurve_02_dest_set(v) {\n\t    this.curve_02_dest = jsCreateListCopy(v);\n\t\n\t    if ((v.length)) {\n\t        const RFACTOR = 1 / 0.23;\n\t        const PFACTOR = 5;\n\t        const DIV_RFACTOR = 1 / (rnbo_exp(RFACTOR) - 1.);\n\t        let currentTime = this.currentsampletime();\n\t        let lastRampEnd = currentTime;\n\t        let lastRampValue = this.curve_02_currentValue;\n\t        let rampEnd = currentTime - this.sampleOffsetIntoNextAudioBuffer;\n\t        this.curve_02_samplecount = 0;\n\t        this.curve_02_startvalue = this.curve_02_currentValue;\n\t\n\t        for (let i = 0; i < this.curve_02_activeRamps.length; i += 4) {\n\t            rampEnd = this.curve_02_activeRamps[i + 1];\n\t\n\t            if (rampEnd > currentTime) {\n\t                this.curve_02_activeRamps[i] = lastRampValue;\n\t                this.curve_02_activeRamps[i + 1] = currentTime;\n\t                this.curve_02_activeRamps.length = i + 4;\n\t                rampEnd = currentTime;\n\t            }\n\t        }\n\t\n\t        if (rampEnd < currentTime) {\n\t            this.curve_02_activeRamps.push(lastRampValue);\n\t            this.curve_02_activeRamps.push(currentTime);\n\t            this.curve_02_activeRamps.push(0);\n\t            this.curve_02_activeRamps.push(0);\n\t        }\n\t\n\t        for (let i = 0; i < v.length; i += 3) {\n\t            let destinationValue = v[i];\n\t            let rampTimeInSamples;\n\t            let curveFactor;\n\t\n\t            if (v.length > i + 1) {\n\t                rampTimeInSamples = this.mstosamps(v[i + 1]);\n\t            } else {\n\t                rampTimeInSamples = this.mstosamps(this.curve_02_time);\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0)\n\t                rampTimeInSamples = 1;\n\t\n\t            if (v.length > i + 2)\n\t                curveFactor = v[i + 2];\n\t            else\n\t                curveFactor = this.curve_02_curve;\n\t\n\t            let f = 1 - rnbo_abs(curveFactor);\n\t            let p = ((curveFactor >= 0. ? 1 : -1)) * PFACTOR * (rnbo_exp(f * RFACTOR) - 1.) * DIV_RFACTOR;\n\t            p = fixdenorm(p);\n\t            let div_erp = 1 / (rnbo_exp(1 / p) - 1.);\n\t            let div_durp = 1 / (rampTimeInSamples * p);\n\t            lastRampEnd += rampTimeInSamples;\n\t            this.curve_02_activeRamps.push(destinationValue);\n\t            this.curve_02_activeRamps.push(lastRampEnd);\n\t            this.curve_02_activeRamps.push(div_erp);\n\t            this.curve_02_activeRamps.push(div_durp);\n\t            lastRampValue = destinationValue;\n\t        }\n\t    }\n\t}\n\tmessage_02_out_set(v) {\n\t    this.curve_02_dest_set(v);\n\t}\n\tmessage_02_bangval_bang() {\n\t    this.sendParameter(0, true);\n\t    this.message_02_out_set([1, 1, 0.5, 0, 1000, -0.5]);\n\t}\n\teventinlet_02_out1_bang_bang() {\n\t    this.message_02_bangval_bang();\n\t}\n\tcurve_02_perform(out, n) {\n\t    var __curve_02_startvalue = this.curve_02_startvalue;\n\t    var __curve_02_samplecount = this.curve_02_samplecount;\n\t    var __curve_02_currentValue = this.curve_02_currentValue;\n\t    let i = 0;\n\t\n\t    if ((this.curve_02_activeRamps.length)) {\n\t        while ((this.curve_02_activeRamps.length) && i < n) {\n\t            let destinationValue = this.curve_02_activeRamps[0];\n\t            let rampTimeInSamples = this.curve_02_activeRamps[1] - this.audioProcessSampleCount - i;\n\t            let val = __curve_02_currentValue;\n\t            let div_erp = this.curve_02_activeRamps[2];\n\t            let div_durp = this.curve_02_activeRamps[3];\n\t\n\t            while (rampTimeInSamples > 0 && i < n) {\n\t                let curv = (rnbo_exp(__curve_02_samplecount * div_durp) - 1) * div_erp;\n\t                val += __curve_02_startvalue - val + curv * (destinationValue - __curve_02_startvalue);\n\t                out[i] = val;\n\t                i++;\n\t                __curve_02_samplecount++;\n\t                rampTimeInSamples--;\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0) {\n\t                __curve_02_samplecount = 0;\n\t                val = destinationValue;\n\t                __curve_02_startvalue = val;\n\t                this.curve_02_activeRamps.splice(0, 4);\n\t\n\t                if ((!(this.curve_02_activeRamps.length)))\n\t                    this.getEngine().scheduleClockEventWithValue(this, 861222235, this.sampsToMs((this.vs)) + this._currentTime, 0);;\n\t            }\n\t\n\t            __curve_02_currentValue = val;\n\t        }\n\t    }\n\t\n\t    while (i < n) {\n\t        out[i] = __curve_02_currentValue;\n\t        i++;\n\t    }\n\t\n\t    this.curve_02_currentValue = __curve_02_currentValue;\n\t    this.curve_02_samplecount = __curve_02_samplecount;\n\t    this.curve_02_startvalue = __curve_02_startvalue;\n\t}\n\tcycle_tilde_02_perform(frequency, phase_offset, out1, out2, n) {\n\t    var __cycle_tilde_02_f2i = this.cycle_tilde_02_f2i;\n\t    var __cycle_tilde_02_phasei = this.cycle_tilde_02_phasei;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        {\n\t            let uint_phase;\n\t\n\t            {\n\t                {\n\t                    uint_phase = __cycle_tilde_02_phasei;\n\t                }\n\t            }\n\t\n\t            let idx = (uint32_rshift(uint_phase, 18));\n\t            let frac = (uint_phase & 262143) * 3.81471181759574e-6;\n\t            let y0 = this.cycle_tilde_02_buffer[idx];\n\t            let y1 = this.cycle_tilde_02_buffer[idx + 1 & 16383];\n\t            let y = y0 + frac * (y1 - y0);\n\t\n\t            {\n\t                let pincr = (uint32_trunc(330 * __cycle_tilde_02_f2i));\n\t                __cycle_tilde_02_phasei = uint32_add(__cycle_tilde_02_phasei, pincr);\n\t            }\n\t\n\t            out1[i] = y;\n\t            out2[i] = uint_phase * 0.232830643653869629e-9;\n\t            continue;\n\t        }\n\t    }\n\t\n\t    this.cycle_tilde_02_phasei = __cycle_tilde_02_phasei;\n\t}\n\tdspexpr_02_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * in2[i];//#map:_###_obj_###_:1\n\t    }\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tcycle_tilde_02_ph_next(freq, reset) {\n\t    {\n\t        {\n\t            if (reset >= 0.)\n\t                this.cycle_tilde_02_ph_currentPhase = reset;\n\t        }\n\t    }\n\t\n\t    const pincr = freq * this.cycle_tilde_02_ph_conv;\n\t\n\t    if (this.cycle_tilde_02_ph_currentPhase < 0.)\n\t        this.cycle_tilde_02_ph_currentPhase = 1. + this.cycle_tilde_02_ph_currentPhase;\n\t\n\t    if (this.cycle_tilde_02_ph_currentPhase > 1.)\n\t        this.cycle_tilde_02_ph_currentPhase = this.cycle_tilde_02_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.cycle_tilde_02_ph_currentPhase;\n\t    this.cycle_tilde_02_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tcycle_tilde_02_ph_reset() {\n\t    this.cycle_tilde_02_ph_currentPhase = 0;\n\t}\n\tcycle_tilde_02_ph_dspsetup() {\n\t    this.cycle_tilde_02_ph_conv = 1 / this.sr;\n\t}\n\tcycle_tilde_02_dspsetup(force) {\n\t    if ((this.cycle_tilde_02_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.cycle_tilde_02_phasei = 0;\n\t    this.cycle_tilde_02_f2i = 4294967296 / this.samplerate();\n\t    this.cycle_tilde_02_wrap = (this.cycle_tilde_02_buffer.getSize()) - 1;\n\t    this.cycle_tilde_02_setupDone = true;\n\t    this.cycle_tilde_02_ph_dspsetup();\n\t}\n\tcycle_tilde_02_bufferUpdated() {\n\t    this.cycle_tilde_02_wrap = (this.cycle_tilde_02_buffer.getSize()) - 1;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1095 {\n\tconstructor() {\n\t\tthis.gate_01_onoff = 0;\n\t\tthis.gate_01_out1_number = 0;\n\t\tthis.gate_01_out1_list = [];\n\t\tthis.expr_01_in1 = 0;\n\t\tthis.expr_01_in2 = 0;\n\t\tthis.expr_01_out1 = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numOutputs);\n\t    RNBO_UNUSED(outputs);\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    RNBO_UNUSED(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 0;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {}\n\tallocateDataRefs() {}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t}\n\tgate_01_onoff_set(v) {\n\t    this.gate_01_onoff = v;\n\t}\n\texpr_01_out1_set(v) {\n\t    this.expr_01_out1 = v;\n\t    this.gate_01_onoff_set(this.expr_01_out1);\n\t}\n\texpr_01_in1_set(in1) {\n\t    this.expr_01_in1 = in1;\n\t    this.expr_01_out1_set(this.expr_01_in1 > this.expr_01_in2);//#map:denorm/>_obj-107:1\n\t}\n\ttrigger_01_out2_set(v) {\n\t    this.expr_01_in1_set(v);\n\t}\n\teventoutlet_01_in1_number_set(v) {\n\t    this.getPatcher().p_03_out1_number_set(v);\n\t}\n\tgate_01_out1_number_set(v) {\n\t    this.gate_01_out1_number = v;\n\t    this.eventoutlet_01_in1_number_set(v);\n\t}\n\tgate_01_input_number_set(v) {\n\t    if (this.gate_01_onoff == 1)\n\t        this.gate_01_out1_number_set(v);\n\t}\n\ttrigger_01_out1_set(v) {\n\t    this.gate_01_input_number_set(v);\n\t}\n\ttrigger_01_input_bang_bang() {\n\t    this.trigger_01_out2_set(0);\n\t    this.trigger_01_out1_set(0);\n\t}\n\teventinlet_03_out1_bang_bang() {\n\t    this.trigger_01_input_bang_bang();\n\t}\n\ttrigger_01_input_number_set(v) {\n\t    this.trigger_01_out2_set(v);\n\t    this.trigger_01_out1_set(v);\n\t}\n\teventinlet_03_out1_number_set(v) {\n\t    this.trigger_01_input_number_set(v);\n\t}\n\ttrigger_01_input_list_set(v) {\n\t    this.trigger_01_out2_set((v.length > 0 ? v[0] : 0));\n\t    this.trigger_01_out1_set((v.length > 0 ? v[0] : 0));\n\t}\n\teventinlet_03_out1_list_set(v) {\n\t    this.trigger_01_input_list_set(v);\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1096 {\n\tconstructor() {\n\t\tthis.dspexpr_03_in1 = 0;\n\t\tthis.dspexpr_03_in2 = 0;\n\t\tthis.curve_03_dest = [];\n\t\tthis.curve_03_time = 0;\n\t\tthis.curve_03_curve = 0;\n\t\tthis.cycle_tilde_03_frequency = 440;\n\t\tthis.cycle_tilde_03_phase_offset = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(2);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.curve_03_activeRamps = [];\n\t\tthis.curve_03_currentValue = 0;\n\t\tthis.curve_03_samplecount = 0;\n\t\tthis.curve_03_startvalue = 0;\n\t\tthis.cycle_tilde_03_buffer = 0;\n\t\tthis.cycle_tilde_03_wrap = 0;\n\t\tthis.cycle_tilde_03_phasei = 0;\n\t\tthis.cycle_tilde_03_f2i = 0;\n\t\tthis.cycle_tilde_03_ph_currentPhase = 0;\n\t\tthis.cycle_tilde_03_ph_conv = 0;\n\t\tthis.cycle_tilde_03_setupDone = false;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tcurrentsampletime() {\n\t    return this.audioProcessSampleCount + this.sampleOffsetIntoNextAudioBuffer;\n\t}\n\tmstosamps(ms) {\n\t    return ms * this.sr * 0.001;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\teventinlet_04_out1_number_set(v) {\n\t    this.message_03_bangval_bang();\n\t}\n\teventinlet_04_out1_list_set(v) {\n\t    this.message_03_bangval_bang();\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tcurve_03_target_bang() {}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.curve_03_perform(this.signals[0], n);\n\t\n\t    this.cycle_tilde_03_perform(\n\t        this.cycle_tilde_03_frequency,\n\t        this.cycle_tilde_03_phase_offset,\n\t        this.signals[1],\n\t        this.dummyBuffer,\n\t        n\n\t    );\n\t\n\t    this.dspexpr_03_perform(this.signals[0], this.signals[1], out1, n);\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 2; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxBlockSize);\n\t        }\n\t\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    this.cycle_tilde_03_dspsetup(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {\n\t    RNBO_UNUSED(v);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 0:\n\t        this.message_03_bangval_bang();\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 1;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"message_03_bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"s[2]/message_obj-39/bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        case 0:\n\t            info.type = ParameterTypeBang;\n\t            info.initialValue = 0;\n\t            info.min = 0;\n\t            info.max = 1;\n\t            info.exponent = 1;\n\t            info.steps = 0;\n\t            info.debug = false;\n\t            info.saveable = true;\n\t            info.transmittable = true;\n\t            info.initialized = false;\n\t            info.visible = false;\n\t            info.displayName = \"\";\n\t            info.unit = \"\";\n\t            info.ioType = IOTypeUndefined;\n\t            info.signalIndex = INVALID_INDEX;\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    RNBO_UNUSED(value);\n\t    RNBO_UNUSED(hasValue);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 861222235:\n\t        this.curve_03_target_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    if (index == 0) {\n\t        this.cycle_tilde_03_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t        this.cycle_tilde_03_bufferUpdated();\n\t    }\n\t}\n\tallocateDataRefs() {\n\t    this.cycle_tilde_03_buffer.requestSize(16384, 1);\n\t    this.cycle_tilde_03_buffer.setSampleRate(this.sr);\n\t    this.cycle_tilde_03_buffer = this.cycle_tilde_03_buffer.allocateIfNeeded();\n\t}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t    this.cycle_tilde_03_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t}\n\tcurve_03_dest_set(v) {\n\t    this.curve_03_dest = jsCreateListCopy(v);\n\t\n\t    if ((v.length)) {\n\t        const RFACTOR = 1 / 0.23;\n\t        const PFACTOR = 5;\n\t        const DIV_RFACTOR = 1 / (rnbo_exp(RFACTOR) - 1.);\n\t        let currentTime = this.currentsampletime();\n\t        let lastRampEnd = currentTime;\n\t        let lastRampValue = this.curve_03_currentValue;\n\t        let rampEnd = currentTime - this.sampleOffsetIntoNextAudioBuffer;\n\t        this.curve_03_samplecount = 0;\n\t        this.curve_03_startvalue = this.curve_03_currentValue;\n\t\n\t        for (let i = 0; i < this.curve_03_activeRamps.length; i += 4) {\n\t            rampEnd = this.curve_03_activeRamps[i + 1];\n\t\n\t            if (rampEnd > currentTime) {\n\t                this.curve_03_activeRamps[i] = lastRampValue;\n\t                this.curve_03_activeRamps[i + 1] = currentTime;\n\t                this.curve_03_activeRamps.length = i + 4;\n\t                rampEnd = currentTime;\n\t            }\n\t        }\n\t\n\t        if (rampEnd < currentTime) {\n\t            this.curve_03_activeRamps.push(lastRampValue);\n\t            this.curve_03_activeRamps.push(currentTime);\n\t            this.curve_03_activeRamps.push(0);\n\t            this.curve_03_activeRamps.push(0);\n\t        }\n\t\n\t        for (let i = 0; i < v.length; i += 3) {\n\t            let destinationValue = v[i];\n\t            let rampTimeInSamples;\n\t            let curveFactor;\n\t\n\t            if (v.length > i + 1) {\n\t                rampTimeInSamples = this.mstosamps(v[i + 1]);\n\t            } else {\n\t                rampTimeInSamples = this.mstosamps(this.curve_03_time);\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0)\n\t                rampTimeInSamples = 1;\n\t\n\t            if (v.length > i + 2)\n\t                curveFactor = v[i + 2];\n\t            else\n\t                curveFactor = this.curve_03_curve;\n\t\n\t            let f = 1 - rnbo_abs(curveFactor);\n\t            let p = ((curveFactor >= 0. ? 1 : -1)) * PFACTOR * (rnbo_exp(f * RFACTOR) - 1.) * DIV_RFACTOR;\n\t            p = fixdenorm(p);\n\t            let div_erp = 1 / (rnbo_exp(1 / p) - 1.);\n\t            let div_durp = 1 / (rampTimeInSamples * p);\n\t            lastRampEnd += rampTimeInSamples;\n\t            this.curve_03_activeRamps.push(destinationValue);\n\t            this.curve_03_activeRamps.push(lastRampEnd);\n\t            this.curve_03_activeRamps.push(div_erp);\n\t            this.curve_03_activeRamps.push(div_durp);\n\t            lastRampValue = destinationValue;\n\t        }\n\t    }\n\t}\n\tmessage_03_out_set(v) {\n\t    this.curve_03_dest_set(v);\n\t}\n\tmessage_03_bangval_bang() {\n\t    this.sendParameter(0, true);\n\t    this.message_03_out_set([1, 1, 0.5, 0, 1000, -0.5]);\n\t}\n\teventinlet_04_out1_bang_bang() {\n\t    this.message_03_bangval_bang();\n\t}\n\tcurve_03_perform(out, n) {\n\t    var __curve_03_startvalue = this.curve_03_startvalue;\n\t    var __curve_03_samplecount = this.curve_03_samplecount;\n\t    var __curve_03_currentValue = this.curve_03_currentValue;\n\t    let i = 0;\n\t\n\t    if ((this.curve_03_activeRamps.length)) {\n\t        while ((this.curve_03_activeRamps.length) && i < n) {\n\t            let destinationValue = this.curve_03_activeRamps[0];\n\t            let rampTimeInSamples = this.curve_03_activeRamps[1] - this.audioProcessSampleCount - i;\n\t            let val = __curve_03_currentValue;\n\t            let div_erp = this.curve_03_activeRamps[2];\n\t            let div_durp = this.curve_03_activeRamps[3];\n\t\n\t            while (rampTimeInSamples > 0 && i < n) {\n\t                let curv = (rnbo_exp(__curve_03_samplecount * div_durp) - 1) * div_erp;\n\t                val += __curve_03_startvalue - val + curv * (destinationValue - __curve_03_startvalue);\n\t                out[i] = val;\n\t                i++;\n\t                __curve_03_samplecount++;\n\t                rampTimeInSamples--;\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0) {\n\t                __curve_03_samplecount = 0;\n\t                val = destinationValue;\n\t                __curve_03_startvalue = val;\n\t                this.curve_03_activeRamps.splice(0, 4);\n\t\n\t                if ((!(this.curve_03_activeRamps.length)))\n\t                    this.getEngine().scheduleClockEventWithValue(this, 861222235, this.sampsToMs((this.vs)) + this._currentTime, 0);;\n\t            }\n\t\n\t            __curve_03_currentValue = val;\n\t        }\n\t    }\n\t\n\t    while (i < n) {\n\t        out[i] = __curve_03_currentValue;\n\t        i++;\n\t    }\n\t\n\t    this.curve_03_currentValue = __curve_03_currentValue;\n\t    this.curve_03_samplecount = __curve_03_samplecount;\n\t    this.curve_03_startvalue = __curve_03_startvalue;\n\t}\n\tcycle_tilde_03_perform(frequency, phase_offset, out1, out2, n) {\n\t    var __cycle_tilde_03_f2i = this.cycle_tilde_03_f2i;\n\t    var __cycle_tilde_03_phasei = this.cycle_tilde_03_phasei;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        {\n\t            let uint_phase;\n\t\n\t            {\n\t                {\n\t                    uint_phase = __cycle_tilde_03_phasei;\n\t                }\n\t            }\n\t\n\t            let idx = (uint32_rshift(uint_phase, 18));\n\t            let frac = (uint_phase & 262143) * 3.81471181759574e-6;\n\t            let y0 = this.cycle_tilde_03_buffer[idx];\n\t            let y1 = this.cycle_tilde_03_buffer[idx + 1 & 16383];\n\t            let y = y0 + frac * (y1 - y0);\n\t\n\t            {\n\t                let pincr = (uint32_trunc(440 * __cycle_tilde_03_f2i));\n\t                __cycle_tilde_03_phasei = uint32_add(__cycle_tilde_03_phasei, pincr);\n\t            }\n\t\n\t            out1[i] = y;\n\t            out2[i] = uint_phase * 0.232830643653869629e-9;\n\t            continue;\n\t        }\n\t    }\n\t\n\t    this.cycle_tilde_03_phasei = __cycle_tilde_03_phasei;\n\t}\n\tdspexpr_03_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * in2[i];//#map:_###_obj_###_:1\n\t    }\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tcycle_tilde_03_ph_next(freq, reset) {\n\t    {\n\t        {\n\t            if (reset >= 0.)\n\t                this.cycle_tilde_03_ph_currentPhase = reset;\n\t        }\n\t    }\n\t\n\t    const pincr = freq * this.cycle_tilde_03_ph_conv;\n\t\n\t    if (this.cycle_tilde_03_ph_currentPhase < 0.)\n\t        this.cycle_tilde_03_ph_currentPhase = 1. + this.cycle_tilde_03_ph_currentPhase;\n\t\n\t    if (this.cycle_tilde_03_ph_currentPhase > 1.)\n\t        this.cycle_tilde_03_ph_currentPhase = this.cycle_tilde_03_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.cycle_tilde_03_ph_currentPhase;\n\t    this.cycle_tilde_03_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tcycle_tilde_03_ph_reset() {\n\t    this.cycle_tilde_03_ph_currentPhase = 0;\n\t}\n\tcycle_tilde_03_ph_dspsetup() {\n\t    this.cycle_tilde_03_ph_conv = 1 / this.sr;\n\t}\n\tcycle_tilde_03_dspsetup(force) {\n\t    if ((this.cycle_tilde_03_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.cycle_tilde_03_phasei = 0;\n\t    this.cycle_tilde_03_f2i = 4294967296 / this.samplerate();\n\t    this.cycle_tilde_03_wrap = (this.cycle_tilde_03_buffer.getSize()) - 1;\n\t    this.cycle_tilde_03_setupDone = true;\n\t    this.cycle_tilde_03_ph_dspsetup();\n\t}\n\tcycle_tilde_03_bufferUpdated() {\n\t    this.cycle_tilde_03_wrap = (this.cycle_tilde_03_buffer.getSize()) - 1;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1097 {\n\tconstructor() {\n\t\tthis.gate_02_onoff = 0;\n\t\tthis.gate_02_out1_number = 0;\n\t\tthis.gate_02_out1_list = [];\n\t\tthis.expr_02_in1 = 0;\n\t\tthis.expr_02_in2 = 0;\n\t\tthis.expr_02_out1 = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numOutputs);\n\t    RNBO_UNUSED(outputs);\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    RNBO_UNUSED(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 0;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {}\n\tallocateDataRefs() {}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t}\n\tgate_02_onoff_set(v) {\n\t    this.gate_02_onoff = v;\n\t}\n\texpr_02_out1_set(v) {\n\t    this.expr_02_out1 = v;\n\t    this.gate_02_onoff_set(this.expr_02_out1);\n\t}\n\texpr_02_in1_set(in1) {\n\t    this.expr_02_in1 = in1;\n\t    this.expr_02_out1_set(this.expr_02_in1 > this.expr_02_in2);//#map:denorm[1]/>_obj-107:1\n\t}\n\ttrigger_02_out2_set(v) {\n\t    this.expr_02_in1_set(v);\n\t}\n\teventoutlet_02_in1_number_set(v) {\n\t    this.getPatcher().p_05_out1_number_set(v);\n\t}\n\tgate_02_out1_number_set(v) {\n\t    this.gate_02_out1_number = v;\n\t    this.eventoutlet_02_in1_number_set(v);\n\t}\n\tgate_02_input_number_set(v) {\n\t    if (this.gate_02_onoff == 1)\n\t        this.gate_02_out1_number_set(v);\n\t}\n\ttrigger_02_out1_set(v) {\n\t    this.gate_02_input_number_set(v);\n\t}\n\ttrigger_02_input_bang_bang() {\n\t    this.trigger_02_out2_set(0);\n\t    this.trigger_02_out1_set(0);\n\t}\n\teventinlet_05_out1_bang_bang() {\n\t    this.trigger_02_input_bang_bang();\n\t}\n\ttrigger_02_input_number_set(v) {\n\t    this.trigger_02_out2_set(v);\n\t    this.trigger_02_out1_set(v);\n\t}\n\teventinlet_05_out1_number_set(v) {\n\t    this.trigger_02_input_number_set(v);\n\t}\n\ttrigger_02_input_list_set(v) {\n\t    this.trigger_02_out2_set((v.length > 0 ? v[0] : 0));\n\t    this.trigger_02_out1_set((v.length > 0 ? v[0] : 0));\n\t}\n\teventinlet_05_out1_list_set(v) {\n\t    this.trigger_02_input_list_set(v);\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1098 {\n\tconstructor() {\n\t\tthis.dspexpr_04_in1 = 0;\n\t\tthis.dspexpr_04_in2 = 0;\n\t\tthis.curve_04_dest = [];\n\t\tthis.curve_04_time = 0;\n\t\tthis.curve_04_curve = 0;\n\t\tthis.cycle_tilde_04_frequency = 660;\n\t\tthis.cycle_tilde_04_phase_offset = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(2);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.curve_04_activeRamps = [];\n\t\tthis.curve_04_currentValue = 0;\n\t\tthis.curve_04_samplecount = 0;\n\t\tthis.curve_04_startvalue = 0;\n\t\tthis.cycle_tilde_04_buffer = 0;\n\t\tthis.cycle_tilde_04_wrap = 0;\n\t\tthis.cycle_tilde_04_phasei = 0;\n\t\tthis.cycle_tilde_04_f2i = 0;\n\t\tthis.cycle_tilde_04_ph_currentPhase = 0;\n\t\tthis.cycle_tilde_04_ph_conv = 0;\n\t\tthis.cycle_tilde_04_setupDone = false;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tcurrentsampletime() {\n\t    return this.audioProcessSampleCount + this.sampleOffsetIntoNextAudioBuffer;\n\t}\n\tmstosamps(ms) {\n\t    return ms * this.sr * 0.001;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\teventinlet_06_out1_number_set(v) {\n\t    this.message_04_bangval_bang();\n\t}\n\teventinlet_06_out1_list_set(v) {\n\t    this.message_04_bangval_bang();\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tcurve_04_target_bang() {}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.curve_04_perform(this.signals[0], n);\n\t\n\t    this.cycle_tilde_04_perform(\n\t        this.cycle_tilde_04_frequency,\n\t        this.cycle_tilde_04_phase_offset,\n\t        this.signals[1],\n\t        this.dummyBuffer,\n\t        n\n\t    );\n\t\n\t    this.dspexpr_04_perform(this.signals[0], this.signals[1], out1, n);\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 2; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxBlockSize);\n\t        }\n\t\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    this.cycle_tilde_04_dspsetup(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {\n\t    RNBO_UNUSED(v);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 0:\n\t        this.message_04_bangval_bang();\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 1;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"message_04_bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"s[3]/message_obj-39/bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        case 0:\n\t            info.type = ParameterTypeBang;\n\t            info.initialValue = 0;\n\t            info.min = 0;\n\t            info.max = 1;\n\t            info.exponent = 1;\n\t            info.steps = 0;\n\t            info.debug = false;\n\t            info.saveable = true;\n\t            info.transmittable = true;\n\t            info.initialized = false;\n\t            info.visible = false;\n\t            info.displayName = \"\";\n\t            info.unit = \"\";\n\t            info.ioType = IOTypeUndefined;\n\t            info.signalIndex = INVALID_INDEX;\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    RNBO_UNUSED(value);\n\t    RNBO_UNUSED(hasValue);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 861222235:\n\t        this.curve_04_target_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    if (index == 0) {\n\t        this.cycle_tilde_04_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t        this.cycle_tilde_04_bufferUpdated();\n\t    }\n\t}\n\tallocateDataRefs() {\n\t    this.cycle_tilde_04_buffer.requestSize(16384, 1);\n\t    this.cycle_tilde_04_buffer.setSampleRate(this.sr);\n\t    this.cycle_tilde_04_buffer = this.cycle_tilde_04_buffer.allocateIfNeeded();\n\t}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t    this.cycle_tilde_04_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t}\n\tcurve_04_dest_set(v) {\n\t    this.curve_04_dest = jsCreateListCopy(v);\n\t\n\t    if ((v.length)) {\n\t        const RFACTOR = 1 / 0.23;\n\t        const PFACTOR = 5;\n\t        const DIV_RFACTOR = 1 / (rnbo_exp(RFACTOR) - 1.);\n\t        let currentTime = this.currentsampletime();\n\t        let lastRampEnd = currentTime;\n\t        let lastRampValue = this.curve_04_currentValue;\n\t        let rampEnd = currentTime - this.sampleOffsetIntoNextAudioBuffer;\n\t        this.curve_04_samplecount = 0;\n\t        this.curve_04_startvalue = this.curve_04_currentValue;\n\t\n\t        for (let i = 0; i < this.curve_04_activeRamps.length; i += 4) {\n\t            rampEnd = this.curve_04_activeRamps[i + 1];\n\t\n\t            if (rampEnd > currentTime) {\n\t                this.curve_04_activeRamps[i] = lastRampValue;\n\t                this.curve_04_activeRamps[i + 1] = currentTime;\n\t                this.curve_04_activeRamps.length = i + 4;\n\t                rampEnd = currentTime;\n\t            }\n\t        }\n\t\n\t        if (rampEnd < currentTime) {\n\t            this.curve_04_activeRamps.push(lastRampValue);\n\t            this.curve_04_activeRamps.push(currentTime);\n\t            this.curve_04_activeRamps.push(0);\n\t            this.curve_04_activeRamps.push(0);\n\t        }\n\t\n\t        for (let i = 0; i < v.length; i += 3) {\n\t            let destinationValue = v[i];\n\t            let rampTimeInSamples;\n\t            let curveFactor;\n\t\n\t            if (v.length > i + 1) {\n\t                rampTimeInSamples = this.mstosamps(v[i + 1]);\n\t            } else {\n\t                rampTimeInSamples = this.mstosamps(this.curve_04_time);\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0)\n\t                rampTimeInSamples = 1;\n\t\n\t            if (v.length > i + 2)\n\t                curveFactor = v[i + 2];\n\t            else\n\t                curveFactor = this.curve_04_curve;\n\t\n\t            let f = 1 - rnbo_abs(curveFactor);\n\t            let p = ((curveFactor >= 0. ? 1 : -1)) * PFACTOR * (rnbo_exp(f * RFACTOR) - 1.) * DIV_RFACTOR;\n\t            p = fixdenorm(p);\n\t            let div_erp = 1 / (rnbo_exp(1 / p) - 1.);\n\t            let div_durp = 1 / (rampTimeInSamples * p);\n\t            lastRampEnd += rampTimeInSamples;\n\t            this.curve_04_activeRamps.push(destinationValue);\n\t            this.curve_04_activeRamps.push(lastRampEnd);\n\t            this.curve_04_activeRamps.push(div_erp);\n\t            this.curve_04_activeRamps.push(div_durp);\n\t            lastRampValue = destinationValue;\n\t        }\n\t    }\n\t}\n\tmessage_04_out_set(v) {\n\t    this.curve_04_dest_set(v);\n\t}\n\tmessage_04_bangval_bang() {\n\t    this.sendParameter(0, true);\n\t    this.message_04_out_set([1, 1, 0.5, 0, 1000, -0.5]);\n\t}\n\teventinlet_06_out1_bang_bang() {\n\t    this.message_04_bangval_bang();\n\t}\n\tcurve_04_perform(out, n) {\n\t    var __curve_04_startvalue = this.curve_04_startvalue;\n\t    var __curve_04_samplecount = this.curve_04_samplecount;\n\t    var __curve_04_currentValue = this.curve_04_currentValue;\n\t    let i = 0;\n\t\n\t    if ((this.curve_04_activeRamps.length)) {\n\t        while ((this.curve_04_activeRamps.length) && i < n) {\n\t            let destinationValue = this.curve_04_activeRamps[0];\n\t            let rampTimeInSamples = this.curve_04_activeRamps[1] - this.audioProcessSampleCount - i;\n\t            let val = __curve_04_currentValue;\n\t            let div_erp = this.curve_04_activeRamps[2];\n\t            let div_durp = this.curve_04_activeRamps[3];\n\t\n\t            while (rampTimeInSamples > 0 && i < n) {\n\t                let curv = (rnbo_exp(__curve_04_samplecount * div_durp) - 1) * div_erp;\n\t                val += __curve_04_startvalue - val + curv * (destinationValue - __curve_04_startvalue);\n\t                out[i] = val;\n\t                i++;\n\t                __curve_04_samplecount++;\n\t                rampTimeInSamples--;\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0) {\n\t                __curve_04_samplecount = 0;\n\t                val = destinationValue;\n\t                __curve_04_startvalue = val;\n\t                this.curve_04_activeRamps.splice(0, 4);\n\t\n\t                if ((!(this.curve_04_activeRamps.length)))\n\t                    this.getEngine().scheduleClockEventWithValue(this, 861222235, this.sampsToMs((this.vs)) + this._currentTime, 0);;\n\t            }\n\t\n\t            __curve_04_currentValue = val;\n\t        }\n\t    }\n\t\n\t    while (i < n) {\n\t        out[i] = __curve_04_currentValue;\n\t        i++;\n\t    }\n\t\n\t    this.curve_04_currentValue = __curve_04_currentValue;\n\t    this.curve_04_samplecount = __curve_04_samplecount;\n\t    this.curve_04_startvalue = __curve_04_startvalue;\n\t}\n\tcycle_tilde_04_perform(frequency, phase_offset, out1, out2, n) {\n\t    var __cycle_tilde_04_f2i = this.cycle_tilde_04_f2i;\n\t    var __cycle_tilde_04_phasei = this.cycle_tilde_04_phasei;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        {\n\t            let uint_phase;\n\t\n\t            {\n\t                {\n\t                    uint_phase = __cycle_tilde_04_phasei;\n\t                }\n\t            }\n\t\n\t            let idx = (uint32_rshift(uint_phase, 18));\n\t            let frac = (uint_phase & 262143) * 3.81471181759574e-6;\n\t            let y0 = this.cycle_tilde_04_buffer[idx];\n\t            let y1 = this.cycle_tilde_04_buffer[idx + 1 & 16383];\n\t            let y = y0 + frac * (y1 - y0);\n\t\n\t            {\n\t                let pincr = (uint32_trunc(660 * __cycle_tilde_04_f2i));\n\t                __cycle_tilde_04_phasei = uint32_add(__cycle_tilde_04_phasei, pincr);\n\t            }\n\t\n\t            out1[i] = y;\n\t            out2[i] = uint_phase * 0.232830643653869629e-9;\n\t            continue;\n\t        }\n\t    }\n\t\n\t    this.cycle_tilde_04_phasei = __cycle_tilde_04_phasei;\n\t}\n\tdspexpr_04_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * in2[i];//#map:_###_obj_###_:1\n\t    }\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tcycle_tilde_04_ph_next(freq, reset) {\n\t    {\n\t        {\n\t            if (reset >= 0.)\n\t                this.cycle_tilde_04_ph_currentPhase = reset;\n\t        }\n\t    }\n\t\n\t    const pincr = freq * this.cycle_tilde_04_ph_conv;\n\t\n\t    if (this.cycle_tilde_04_ph_currentPhase < 0.)\n\t        this.cycle_tilde_04_ph_currentPhase = 1. + this.cycle_tilde_04_ph_currentPhase;\n\t\n\t    if (this.cycle_tilde_04_ph_currentPhase > 1.)\n\t        this.cycle_tilde_04_ph_currentPhase = this.cycle_tilde_04_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.cycle_tilde_04_ph_currentPhase;\n\t    this.cycle_tilde_04_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tcycle_tilde_04_ph_reset() {\n\t    this.cycle_tilde_04_ph_currentPhase = 0;\n\t}\n\tcycle_tilde_04_ph_dspsetup() {\n\t    this.cycle_tilde_04_ph_conv = 1 / this.sr;\n\t}\n\tcycle_tilde_04_dspsetup(force) {\n\t    if ((this.cycle_tilde_04_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.cycle_tilde_04_phasei = 0;\n\t    this.cycle_tilde_04_f2i = 4294967296 / this.samplerate();\n\t    this.cycle_tilde_04_wrap = (this.cycle_tilde_04_buffer.getSize()) - 1;\n\t    this.cycle_tilde_04_setupDone = true;\n\t    this.cycle_tilde_04_ph_dspsetup();\n\t}\n\tcycle_tilde_04_bufferUpdated() {\n\t    this.cycle_tilde_04_wrap = (this.cycle_tilde_04_buffer.getSize()) - 1;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1099 {\n\tconstructor() {\n\t\tthis.gate_03_onoff = 0;\n\t\tthis.gate_03_out1_number = 0;\n\t\tthis.gate_03_out1_list = [];\n\t\tthis.expr_03_in1 = 0;\n\t\tthis.expr_03_in2 = 0;\n\t\tthis.expr_03_out1 = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numOutputs);\n\t    RNBO_UNUSED(outputs);\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    RNBO_UNUSED(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 0;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {}\n\tallocateDataRefs() {}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t}\n\tgate_03_onoff_set(v) {\n\t    this.gate_03_onoff = v;\n\t}\n\texpr_03_out1_set(v) {\n\t    this.expr_03_out1 = v;\n\t    this.gate_03_onoff_set(this.expr_03_out1);\n\t}\n\texpr_03_in1_set(in1) {\n\t    this.expr_03_in1 = in1;\n\t    this.expr_03_out1_set(this.expr_03_in1 > this.expr_03_in2);//#map:denorm[2]/>_obj-107:1\n\t}\n\ttrigger_03_out2_set(v) {\n\t    this.expr_03_in1_set(v);\n\t}\n\teventoutlet_03_in1_number_set(v) {\n\t    this.getPatcher().p_07_out1_number_set(v);\n\t}\n\tgate_03_out1_number_set(v) {\n\t    this.gate_03_out1_number = v;\n\t    this.eventoutlet_03_in1_number_set(v);\n\t}\n\tgate_03_input_number_set(v) {\n\t    if (this.gate_03_onoff == 1)\n\t        this.gate_03_out1_number_set(v);\n\t}\n\ttrigger_03_out1_set(v) {\n\t    this.gate_03_input_number_set(v);\n\t}\n\ttrigger_03_input_bang_bang() {\n\t    this.trigger_03_out2_set(0);\n\t    this.trigger_03_out1_set(0);\n\t}\n\teventinlet_07_out1_bang_bang() {\n\t    this.trigger_03_input_bang_bang();\n\t}\n\ttrigger_03_input_number_set(v) {\n\t    this.trigger_03_out2_set(v);\n\t    this.trigger_03_out1_set(v);\n\t}\n\teventinlet_07_out1_number_set(v) {\n\t    this.trigger_03_input_number_set(v);\n\t}\n\ttrigger_03_input_list_set(v) {\n\t    this.trigger_03_out2_set((v.length > 0 ? v[0] : 0));\n\t    this.trigger_03_out1_set((v.length > 0 ? v[0] : 0));\n\t}\n\teventinlet_07_out1_list_set(v) {\n\t    this.trigger_03_input_list_set(v);\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1100 {\n\tconstructor() {\n\t\tthis.dspexpr_05_in1 = 0;\n\t\tthis.dspexpr_05_in2 = 0;\n\t\tthis.curve_05_dest = [];\n\t\tthis.curve_05_time = 0;\n\t\tthis.curve_05_curve = 0;\n\t\tthis.cycle_tilde_05_frequency = 770;\n\t\tthis.cycle_tilde_05_phase_offset = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(2);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.curve_05_activeRamps = [];\n\t\tthis.curve_05_currentValue = 0;\n\t\tthis.curve_05_samplecount = 0;\n\t\tthis.curve_05_startvalue = 0;\n\t\tthis.cycle_tilde_05_buffer = 0;\n\t\tthis.cycle_tilde_05_wrap = 0;\n\t\tthis.cycle_tilde_05_phasei = 0;\n\t\tthis.cycle_tilde_05_f2i = 0;\n\t\tthis.cycle_tilde_05_ph_currentPhase = 0;\n\t\tthis.cycle_tilde_05_ph_conv = 0;\n\t\tthis.cycle_tilde_05_setupDone = false;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tcurrentsampletime() {\n\t    return this.audioProcessSampleCount + this.sampleOffsetIntoNextAudioBuffer;\n\t}\n\tmstosamps(ms) {\n\t    return ms * this.sr * 0.001;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\teventinlet_08_out1_number_set(v) {\n\t    this.message_05_bangval_bang();\n\t}\n\teventinlet_08_out1_list_set(v) {\n\t    this.message_05_bangval_bang();\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tcurve_05_target_bang() {}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.curve_05_perform(this.signals[0], n);\n\t\n\t    this.cycle_tilde_05_perform(\n\t        this.cycle_tilde_05_frequency,\n\t        this.cycle_tilde_05_phase_offset,\n\t        this.signals[1],\n\t        this.dummyBuffer,\n\t        n\n\t    );\n\t\n\t    this.dspexpr_05_perform(this.signals[0], this.signals[1], out1, n);\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 2; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxBlockSize);\n\t        }\n\t\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    this.cycle_tilde_05_dspsetup(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {\n\t    RNBO_UNUSED(v);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 0:\n\t        this.message_05_bangval_bang();\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 1;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"message_05_bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return \"s[4]/message_obj-39/bangval\";\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        case 0:\n\t            info.type = ParameterTypeBang;\n\t            info.initialValue = 0;\n\t            info.min = 0;\n\t            info.max = 1;\n\t            info.exponent = 1;\n\t            info.steps = 0;\n\t            info.debug = false;\n\t            info.saveable = true;\n\t            info.transmittable = true;\n\t            info.initialized = false;\n\t            info.visible = false;\n\t            info.displayName = \"\";\n\t            info.unit = \"\";\n\t            info.ioType = IOTypeUndefined;\n\t            info.signalIndex = INVALID_INDEX;\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    RNBO_UNUSED(value);\n\t    RNBO_UNUSED(hasValue);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 861222235:\n\t        this.curve_05_target_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    if (index == 0) {\n\t        this.cycle_tilde_05_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t        this.cycle_tilde_05_bufferUpdated();\n\t    }\n\t}\n\tallocateDataRefs() {\n\t    this.cycle_tilde_05_buffer.requestSize(16384, 1);\n\t    this.cycle_tilde_05_buffer.setSampleRate(this.sr);\n\t    this.cycle_tilde_05_buffer = this.cycle_tilde_05_buffer.allocateIfNeeded();\n\t}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t    this.cycle_tilde_05_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t}\n\tcurve_05_dest_set(v) {\n\t    this.curve_05_dest = jsCreateListCopy(v);\n\t\n\t    if ((v.length)) {\n\t        const RFACTOR = 1 / 0.23;\n\t        const PFACTOR = 5;\n\t        const DIV_RFACTOR = 1 / (rnbo_exp(RFACTOR) - 1.);\n\t        let currentTime = this.currentsampletime();\n\t        let lastRampEnd = currentTime;\n\t        let lastRampValue = this.curve_05_currentValue;\n\t        let rampEnd = currentTime - this.sampleOffsetIntoNextAudioBuffer;\n\t        this.curve_05_samplecount = 0;\n\t        this.curve_05_startvalue = this.curve_05_currentValue;\n\t\n\t        for (let i = 0; i < this.curve_05_activeRamps.length; i += 4) {\n\t            rampEnd = this.curve_05_activeRamps[i + 1];\n\t\n\t            if (rampEnd > currentTime) {\n\t                this.curve_05_activeRamps[i] = lastRampValue;\n\t                this.curve_05_activeRamps[i + 1] = currentTime;\n\t                this.curve_05_activeRamps.length = i + 4;\n\t                rampEnd = currentTime;\n\t            }\n\t        }\n\t\n\t        if (rampEnd < currentTime) {\n\t            this.curve_05_activeRamps.push(lastRampValue);\n\t            this.curve_05_activeRamps.push(currentTime);\n\t            this.curve_05_activeRamps.push(0);\n\t            this.curve_05_activeRamps.push(0);\n\t        }\n\t\n\t        for (let i = 0; i < v.length; i += 3) {\n\t            let destinationValue = v[i];\n\t            let rampTimeInSamples;\n\t            let curveFactor;\n\t\n\t            if (v.length > i + 1) {\n\t                rampTimeInSamples = this.mstosamps(v[i + 1]);\n\t            } else {\n\t                rampTimeInSamples = this.mstosamps(this.curve_05_time);\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0)\n\t                rampTimeInSamples = 1;\n\t\n\t            if (v.length > i + 2)\n\t                curveFactor = v[i + 2];\n\t            else\n\t                curveFactor = this.curve_05_curve;\n\t\n\t            let f = 1 - rnbo_abs(curveFactor);\n\t            let p = ((curveFactor >= 0. ? 1 : -1)) * PFACTOR * (rnbo_exp(f * RFACTOR) - 1.) * DIV_RFACTOR;\n\t            p = fixdenorm(p);\n\t            let div_erp = 1 / (rnbo_exp(1 / p) - 1.);\n\t            let div_durp = 1 / (rampTimeInSamples * p);\n\t            lastRampEnd += rampTimeInSamples;\n\t            this.curve_05_activeRamps.push(destinationValue);\n\t            this.curve_05_activeRamps.push(lastRampEnd);\n\t            this.curve_05_activeRamps.push(div_erp);\n\t            this.curve_05_activeRamps.push(div_durp);\n\t            lastRampValue = destinationValue;\n\t        }\n\t    }\n\t}\n\tmessage_05_out_set(v) {\n\t    this.curve_05_dest_set(v);\n\t}\n\tmessage_05_bangval_bang() {\n\t    this.sendParameter(0, true);\n\t    this.message_05_out_set([1, 1, 0.5, 0, 1000, -0.5]);\n\t}\n\teventinlet_08_out1_bang_bang() {\n\t    this.message_05_bangval_bang();\n\t}\n\tcurve_05_perform(out, n) {\n\t    var __curve_05_startvalue = this.curve_05_startvalue;\n\t    var __curve_05_samplecount = this.curve_05_samplecount;\n\t    var __curve_05_currentValue = this.curve_05_currentValue;\n\t    let i = 0;\n\t\n\t    if ((this.curve_05_activeRamps.length)) {\n\t        while ((this.curve_05_activeRamps.length) && i < n) {\n\t            let destinationValue = this.curve_05_activeRamps[0];\n\t            let rampTimeInSamples = this.curve_05_activeRamps[1] - this.audioProcessSampleCount - i;\n\t            let val = __curve_05_currentValue;\n\t            let div_erp = this.curve_05_activeRamps[2];\n\t            let div_durp = this.curve_05_activeRamps[3];\n\t\n\t            while (rampTimeInSamples > 0 && i < n) {\n\t                let curv = (rnbo_exp(__curve_05_samplecount * div_durp) - 1) * div_erp;\n\t                val += __curve_05_startvalue - val + curv * (destinationValue - __curve_05_startvalue);\n\t                out[i] = val;\n\t                i++;\n\t                __curve_05_samplecount++;\n\t                rampTimeInSamples--;\n\t            }\n\t\n\t            if (rampTimeInSamples <= 0) {\n\t                __curve_05_samplecount = 0;\n\t                val = destinationValue;\n\t                __curve_05_startvalue = val;\n\t                this.curve_05_activeRamps.splice(0, 4);\n\t\n\t                if ((!(this.curve_05_activeRamps.length)))\n\t                    this.getEngine().scheduleClockEventWithValue(this, 861222235, this.sampsToMs((this.vs)) + this._currentTime, 0);;\n\t            }\n\t\n\t            __curve_05_currentValue = val;\n\t        }\n\t    }\n\t\n\t    while (i < n) {\n\t        out[i] = __curve_05_currentValue;\n\t        i++;\n\t    }\n\t\n\t    this.curve_05_currentValue = __curve_05_currentValue;\n\t    this.curve_05_samplecount = __curve_05_samplecount;\n\t    this.curve_05_startvalue = __curve_05_startvalue;\n\t}\n\tcycle_tilde_05_perform(frequency, phase_offset, out1, out2, n) {\n\t    var __cycle_tilde_05_f2i = this.cycle_tilde_05_f2i;\n\t    var __cycle_tilde_05_phasei = this.cycle_tilde_05_phasei;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        {\n\t            let uint_phase;\n\t\n\t            {\n\t                {\n\t                    uint_phase = __cycle_tilde_05_phasei;\n\t                }\n\t            }\n\t\n\t            let idx = (uint32_rshift(uint_phase, 18));\n\t            let frac = (uint_phase & 262143) * 3.81471181759574e-6;\n\t            let y0 = this.cycle_tilde_05_buffer[idx];\n\t            let y1 = this.cycle_tilde_05_buffer[idx + 1 & 16383];\n\t            let y = y0 + frac * (y1 - y0);\n\t\n\t            {\n\t                let pincr = (uint32_trunc(770 * __cycle_tilde_05_f2i));\n\t                __cycle_tilde_05_phasei = uint32_add(__cycle_tilde_05_phasei, pincr);\n\t            }\n\t\n\t            out1[i] = y;\n\t            out2[i] = uint_phase * 0.232830643653869629e-9;\n\t            continue;\n\t        }\n\t    }\n\t\n\t    this.cycle_tilde_05_phasei = __cycle_tilde_05_phasei;\n\t}\n\tdspexpr_05_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * in2[i];//#map:_###_obj_###_:1\n\t    }\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tcycle_tilde_05_ph_next(freq, reset) {\n\t    {\n\t        {\n\t            if (reset >= 0.)\n\t                this.cycle_tilde_05_ph_currentPhase = reset;\n\t        }\n\t    }\n\t\n\t    const pincr = freq * this.cycle_tilde_05_ph_conv;\n\t\n\t    if (this.cycle_tilde_05_ph_currentPhase < 0.)\n\t        this.cycle_tilde_05_ph_currentPhase = 1. + this.cycle_tilde_05_ph_currentPhase;\n\t\n\t    if (this.cycle_tilde_05_ph_currentPhase > 1.)\n\t        this.cycle_tilde_05_ph_currentPhase = this.cycle_tilde_05_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.cycle_tilde_05_ph_currentPhase;\n\t    this.cycle_tilde_05_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tcycle_tilde_05_ph_reset() {\n\t    this.cycle_tilde_05_ph_currentPhase = 0;\n\t}\n\tcycle_tilde_05_ph_dspsetup() {\n\t    this.cycle_tilde_05_ph_conv = 1 / this.sr;\n\t}\n\tcycle_tilde_05_dspsetup(force) {\n\t    if ((this.cycle_tilde_05_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.cycle_tilde_05_phasei = 0;\n\t    this.cycle_tilde_05_f2i = 4294967296 / this.samplerate();\n\t    this.cycle_tilde_05_wrap = (this.cycle_tilde_05_buffer.getSize()) - 1;\n\t    this.cycle_tilde_05_setupDone = true;\n\t    this.cycle_tilde_05_ph_dspsetup();\n\t}\n\tcycle_tilde_05_bufferUpdated() {\n\t    this.cycle_tilde_05_wrap = (this.cycle_tilde_05_buffer.getSize()) - 1;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\n\nclass RNBOSubpatcher_1101 {\n\tconstructor() {\n\t\tthis.gate_04_onoff = 0;\n\t\tthis.gate_04_out1_number = 0;\n\t\tthis.gate_04_out1_list = [];\n\t\tthis.expr_04_in1 = 0;\n\t\tthis.expr_04_in2 = 0;\n\t\tthis.expr_04_out1 = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.stackprotect_count = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numOutputs);\n\t    RNBO_UNUSED(outputs);\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    this.stackprotect_perform(n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    RNBO_UNUSED(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 0;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tinitializeObjects() {}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {}\n\tprocessTransportEvent(time, state) {}\n\tprocessBeatTimeEvent(time, beattime) {}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {}\n\tsetParameterValue(index, v, time) {}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {}\n\tsendParameter(index, ignoreValue) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset, ignoreValue);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {}\n\tprocessListMessage(tag, objectId, time, payload) {}\n\tprocessBangMessage(tag, objectId, time) {}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return null;\n\t}\n\tstartup() {}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tfillDataRef(index, ref) {}\n\tprocessDataViewUpdate(index, time) {}\n\tallocateDataRefs() {}\n\tinitialize() {\n\t    this.assign_defaults();\n\t    this.setState();\n\t}\n\tgate_04_onoff_set(v) {\n\t    this.gate_04_onoff = v;\n\t}\n\texpr_04_out1_set(v) {\n\t    this.expr_04_out1 = v;\n\t    this.gate_04_onoff_set(this.expr_04_out1);\n\t}\n\texpr_04_in1_set(in1) {\n\t    this.expr_04_in1 = in1;\n\t    this.expr_04_out1_set(this.expr_04_in1 > this.expr_04_in2);//#map:denorm[3]/>_obj-107:1\n\t}\n\ttrigger_04_out2_set(v) {\n\t    this.expr_04_in1_set(v);\n\t}\n\teventoutlet_04_in1_number_set(v) {\n\t    this.getPatcher().p_09_out1_number_set(v);\n\t}\n\tgate_04_out1_number_set(v) {\n\t    this.gate_04_out1_number = v;\n\t    this.eventoutlet_04_in1_number_set(v);\n\t}\n\tgate_04_input_number_set(v) {\n\t    if (this.gate_04_onoff == 1)\n\t        this.gate_04_out1_number_set(v);\n\t}\n\ttrigger_04_out1_set(v) {\n\t    this.gate_04_input_number_set(v);\n\t}\n\ttrigger_04_input_bang_bang() {\n\t    this.trigger_04_out2_set(0);\n\t    this.trigger_04_out1_set(0);\n\t}\n\teventinlet_09_out1_bang_bang() {\n\t    this.trigger_04_input_bang_bang();\n\t}\n\ttrigger_04_input_number_set(v) {\n\t    this.trigger_04_out2_set(v);\n\t    this.trigger_04_out1_set(v);\n\t}\n\teventinlet_09_out1_number_set(v) {\n\t    this.trigger_04_input_number_set(v);\n\t}\n\ttrigger_04_input_list_set(v) {\n\t    this.trigger_04_out2_set((v.length > 0 ? v[0] : 0));\n\t    this.trigger_04_out1_set((v.length > 0 ? v[0] : 0));\n\t}\n\teventinlet_09_out1_list_set(v) {\n\t    this.trigger_04_input_list_set(v);\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\nclass RNBOPatcher {\n\tconstructor() {\n\t\tthis.dspexpr_06_in1 = 0;\n\t\tthis.dspexpr_06_in2 = 0.125;\n\t\tthis.p_01_target = 0;\n\t\tthis.phasor_01_freq = 1;\n\t\tthis.dspexpr_07_in1 = 0;\n\t\tthis.dspexpr_07_in2 = -0.5;\n\t\tthis.delta_tilde_01_x = 0;\n\t\tthis.dspexpr_08_in1 = 0;\n\t\tthis.dspexpr_08_in2 = -0.5;\n\t\tthis.p_02_target = 0;\n\t\tthis.delta_tilde_02_x = 0;\n\t\tthis.rate_tilde_01_phase = 0;\n\t\tthis.rate_tilde_01_multiplier = 1;\n\t\tthis.p_03_target = 0;\n\t\tthis.dspexpr_09_in1 = 0;\n\t\tthis.dspexpr_09_in2 = -0.5;\n\t\tthis.p_04_target = 0;\n\t\tthis.delta_tilde_03_x = 0;\n\t\tthis.rate_tilde_02_phase = 0;\n\t\tthis.rate_tilde_02_multiplier = 1;\n\t\tthis.p_05_target = 0;\n\t\tthis.dspexpr_10_in1 = 0;\n\t\tthis.dspexpr_10_in2 = -0.5;\n\t\tthis.p_06_target = 0;\n\t\tthis.delta_tilde_04_x = 0;\n\t\tthis.rate_tilde_03_phase = 0;\n\t\tthis.rate_tilde_03_multiplier = 1;\n\t\tthis.p_07_target = 0;\n\t\tthis.dspexpr_11_in1 = 0;\n\t\tthis.dspexpr_11_in2 = -0.5;\n\t\tthis.p_08_target = 0;\n\t\tthis.delta_tilde_05_x = 0;\n\t\tthis.rate_tilde_04_phase = 0;\n\t\tthis.rate_tilde_04_multiplier = 1;\n\t\tthis.p_09_target = 0;\n\t\tthis.listchange_01_input = [];\n\t\tthis.listchange_01_compare = [0];\n\t\tthis.join_01_in0 = [0];\n\t\tthis.join_01_in1 = [0];\n\t\tthis.join_01_in2 = [0];\n\t\tthis.join_01_in3 = [0];\n\t\tthis.join_01_in4 = [0];\n\t\tthis.snapshot_01_interval = 0;\n\t\tthis.snapshot_01_out = 0;\n\t\tthis.expr_05_out1 = 0;\n\t\tthis.snapshot_02_interval = 0;\n\t\tthis.snapshot_02_out = 0;\n\t\tthis.snapshot_03_interval = 0;\n\t\tthis.snapshot_03_out = 0;\n\t\tthis.expr_06_out1 = 0;\n\t\tthis.snapshot_04_interval = 0;\n\t\tthis.snapshot_04_out = 0;\n\t\tthis.expr_07_out1 = 0;\n\t\tthis.loadmess_01_message = [1];\n\t\tthis.snapshot_05_interval = 0;\n\t\tthis.snapshot_05_out = 0;\n\t\tthis.metro_01_on = 0;\n\t\tthis.metro_01_interval = 5;\n\t\tthis.metro_01_interval_setter(this.metro_01_interval);\n\t\tthis.expr_08_out1 = 0;\n\t\tthis._currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(5);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.edge_01_currentState = 0;\n\t\tthis.edge_01_setupDone = false;\n\t\tthis.phasor_01_sigbuf = 0;\n\t\tthis.phasor_01_lastLockedPhase = 0;\n\t\tthis.phasor_01_conv = 0;\n\t\tthis.phasor_01_ph_currentPhase = 0;\n\t\tthis.phasor_01_ph_conv = 0;\n\t\tthis.phasor_01_setupDone = false;\n\t\tthis.delta_tilde_01_prev = 0;\n\t\tthis.delta_tilde_01_setupDone = false;\n\t\tthis.edge_02_currentState = 0;\n\t\tthis.edge_02_setupDone = false;\n\t\tthis.delta_tilde_02_prev = 0;\n\t\tthis.delta_tilde_02_setupDone = false;\n\t\tthis.rate_tilde_01_currentPhase = 0;\n\t\tthis.rate_tilde_01_diff = 0;\n\t\tthis.rate_tilde_01_prev = 0;\n\t\tthis.rate_tilde_01_mult = 1;\n\t\tthis.rate_tilde_01_invmult = 1;\n\t\tthis.rate_tilde_01_wantlock = 1;\n\t\tthis.rate_tilde_01_quant = 1;\n\t\tthis.rate_tilde_01_setupDone = false;\n\t\tthis.edge_03_currentState = 0;\n\t\tthis.edge_03_setupDone = false;\n\t\tthis.delta_tilde_03_prev = 0;\n\t\tthis.delta_tilde_03_setupDone = false;\n\t\tthis.rate_tilde_02_currentPhase = 0;\n\t\tthis.rate_tilde_02_diff = 0;\n\t\tthis.rate_tilde_02_prev = 0;\n\t\tthis.rate_tilde_02_mult = 1;\n\t\tthis.rate_tilde_02_invmult = 1;\n\t\tthis.rate_tilde_02_wantlock = 1;\n\t\tthis.rate_tilde_02_quant = 1;\n\t\tthis.rate_tilde_02_setupDone = false;\n\t\tthis.edge_04_currentState = 0;\n\t\tthis.edge_04_setupDone = false;\n\t\tthis.delta_tilde_04_prev = 0;\n\t\tthis.delta_tilde_04_setupDone = false;\n\t\tthis.rate_tilde_03_currentPhase = 0;\n\t\tthis.rate_tilde_03_diff = 0;\n\t\tthis.rate_tilde_03_prev = 0;\n\t\tthis.rate_tilde_03_mult = 1;\n\t\tthis.rate_tilde_03_invmult = 1;\n\t\tthis.rate_tilde_03_wantlock = 1;\n\t\tthis.rate_tilde_03_quant = 1;\n\t\tthis.rate_tilde_03_setupDone = false;\n\t\tthis.edge_05_currentState = 0;\n\t\tthis.edge_05_setupDone = false;\n\t\tthis.delta_tilde_05_prev = 0;\n\t\tthis.delta_tilde_05_setupDone = false;\n\t\tthis.rate_tilde_04_currentPhase = 0;\n\t\tthis.rate_tilde_04_diff = 0;\n\t\tthis.rate_tilde_04_prev = 0;\n\t\tthis.rate_tilde_04_mult = 1;\n\t\tthis.rate_tilde_04_invmult = 1;\n\t\tthis.rate_tilde_04_wantlock = 1;\n\t\tthis.rate_tilde_04_quant = 1;\n\t\tthis.rate_tilde_04_setupDone = false;\n\t\tthis.snapshot_01_calc = 0;\n\t\tthis.snapshot_01_nextTime = 0;\n\t\tthis.snapshot_01_count = 0;\n\t\tthis.snapshot_01_lastValue = 0;\n\t\tthis.snapshot_02_calc = 0;\n\t\tthis.snapshot_02_nextTime = 0;\n\t\tthis.snapshot_02_count = 0;\n\t\tthis.snapshot_02_lastValue = 0;\n\t\tthis.snapshot_03_calc = 0;\n\t\tthis.snapshot_03_nextTime = 0;\n\t\tthis.snapshot_03_count = 0;\n\t\tthis.snapshot_03_lastValue = 0;\n\t\tthis.snapshot_04_calc = 0;\n\t\tthis.snapshot_04_nextTime = 0;\n\t\tthis.snapshot_04_count = 0;\n\t\tthis.snapshot_04_lastValue = 0;\n\t\tthis.snapshot_05_calc = 0;\n\t\tthis.snapshot_05_nextTime = 0;\n\t\tthis.snapshot_05_count = 0;\n\t\tthis.snapshot_05_lastValue = 0;\n\t\tthis.globaltransport_tempo = 0;\n\t\tthis.globaltransport_tempoNeedsReset = false;\n\t\tthis.globaltransport_lastTempo = 120;\n\t\tthis.globaltransport_state = 0;\n\t\tthis.globaltransport_stateNeedsReset = false;\n\t\tthis.globaltransport_lastState = 0;\n\t\tthis.globaltransport_beatTimeChanges = [0,0];\n\t\tthis.globaltransport_timeSignatureChanges = [4,4,0];\n\t\tthis.globaltransport_notify = false;\n\t\tthis.globaltransport_setupDone = false;\n\t\tthis.stackprotect_count = 0;\n\t\tthis.RNBODefaultSinus = 0;\n\t\tthis._voiceIndex = 0;\n\t\tthis._noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.paramInitIndices = [];\n\t\tthis.paramInitOrder = [];\n\t\tthis.p_01 = new Array();\n\t\tthis.p_02 = new Array();\n\t\tthis.p_03 = new Array();\n\t\tthis.p_04 = new Array();\n\t\tthis.p_05 = new Array();\n\t\tthis.p_06 = new Array();\n\t\tthis.p_07 = new Array();\n\t\tthis.p_08 = new Array();\n\t\tthis.p_09 = new Array();\n\t} // end constructor\n\tlistquicksort(arr, sortindices, l, h, ascending) {\n\t    if (l < h) {\n\t        var p = (this.listpartition(arr, sortindices, l, h, ascending));\n\t        this.listquicksort(arr, sortindices, l, p - 1, ascending);\n\t        this.listquicksort(arr, sortindices, p + 1, h, ascending);\n\t    }\n\t}\n\tlistpartition(arr, sortindices, l, h, ascending) {\n\t    var x = arr[h];\n\t    var i = (l - 1);\n\t\n\t    for (var j = (l); j <= h - 1; j++) {\n\t        var asc = ((ascending) && arr[j] <= x);\n\t        var desc = ((!(ascending)) && arr[j] >= x);\n\t\n\t        if ((asc) || (desc)) {\n\t            i++;\n\t            this.listswapelements(arr, i, j);\n\t            this.listswapelements(sortindices, i, j);\n\t        }\n\t    }\n\t\n\t    i++;\n\t    this.listswapelements(arr, i, h);\n\t    this.listswapelements(sortindices, i, h);\n\t    return i;\n\t}\n\tlistswapelements(arr, a, b) {\n\t    var tmp = arr[a];\n\t    arr[a] = arr[b];\n\t    arr[b] = tmp;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\tsafediv(num, denom) {\n\t    return (denom == 0.0 ? 0.0 : num / denom);\n\t}\n\tquantize(value, quantum) {\n\t    return rnbo_floor(value * quantum + 0.5) / quantum;\n\t}\n\tappend(a, b) {\n\t    return a.concat(b);\n\t}\n\tcurrenttime() {\n\t    return this._currentTime;\n\t}\n\ttempo() {\n\t    return this.getTopLevelPatcher().globaltransport_getTempo();\n\t}\n\tmstobeats(ms) {\n\t    return ms * this.tempo() * 0.008 / 480;\n\t}\n\tsampstoms(samps) {\n\t    return samps * 1000 / this.sr;\n\t}\n\tinport_01_value_bang_bang() {\n\t    this.inport_01_out_bang_bang();\n\t}\n\tinport_01_value_number_set(v) {\n\t    this.inport_01_out_number_set(v);\n\t}\n\tinport_01_value_list_set(v) {\n\t    this.inport_01_out_list_set(v);\n\t}\n\tedge_01_onout_bang() {\n\t    this.p_01_in1_bang_bang();\n\t}\n\tedge_01_offout_bang() {}\n\tedge_02_onout_bang() {\n\t    this.p_02_in1_bang_bang();\n\t}\n\tedge_02_offout_bang() {}\n\tinport_02_value_bang_bang() {\n\t    this.inport_02_out_bang_bang();\n\t}\n\tinport_02_value_number_set(v) {\n\t    this.inport_02_out_number_set(v);\n\t}\n\tinport_02_value_list_set(v) {\n\t    this.inport_02_out_list_set(v);\n\t}\n\tedge_03_onout_bang() {\n\t    this.p_04_in1_bang_bang();\n\t}\n\tedge_03_offout_bang() {}\n\tinport_03_value_bang_bang() {\n\t    this.inport_03_out_bang_bang();\n\t}\n\tinport_03_value_number_set(v) {\n\t    this.inport_03_out_number_set(v);\n\t}\n\tinport_03_value_list_set(v) {\n\t    this.inport_03_out_list_set(v);\n\t}\n\tedge_04_onout_bang() {\n\t    this.p_06_in1_bang_bang();\n\t}\n\tedge_04_offout_bang() {}\n\tinport_04_value_bang_bang() {\n\t    this.inport_04_out_bang_bang();\n\t}\n\tinport_04_value_number_set(v) {\n\t    this.inport_04_out_number_set(v);\n\t}\n\tinport_04_value_list_set(v) {\n\t    this.inport_04_out_list_set(v);\n\t}\n\tedge_05_onout_bang() {\n\t    this.p_08_in1_bang_bang();\n\t}\n\tedge_05_offout_bang() {}\n\tinport_05_value_bang_bang() {\n\t    this.inport_05_out_bang_bang();\n\t}\n\tinport_05_value_number_set(v) {\n\t    this.inport_05_out_number_set(v);\n\t}\n\tinport_05_value_list_set(v) {\n\t    this.inport_05_out_list_set(v);\n\t}\n\tsnapshot_01_out_set(v) {\n\t    this.snapshot_01_out = v;\n\t\n\t    {\n\t        let converted = [v];\n\t        this.join_01_in0_set(converted);\n\t    }\n\t}\n\texpr_05_in1_bang() {\n\t    this.expr_05_out1_set(3 / 2);//#map:expr_obj-99:1\n\t}\n\tsnapshot_02_out_set(v) {\n\t    this.snapshot_02_out = v;\n\t\n\t    {\n\t        let converted = [v];\n\t        this.join_01_in1_set(converted);\n\t    }\n\t}\n\tsnapshot_03_out_set(v) {\n\t    this.snapshot_03_out = v;\n\t\n\t    {\n\t        let converted = [v];\n\t        this.join_01_in2_set(converted);\n\t    }\n\t}\n\texpr_06_in1_bang() {\n\t    this.expr_06_out1_set(5 / 4);//#map:expr_obj-100:1\n\t}\n\tsnapshot_04_out_set(v) {\n\t    this.snapshot_04_out = v;\n\t\n\t    {\n\t        let converted = [v];\n\t        this.join_01_in3_set(converted);\n\t    }\n\t}\n\texpr_07_in1_bang() {\n\t    this.expr_07_out1_set(15 / 16);//#map:expr_obj-93:1\n\t}\n\tloadmess_01_startupbang_bang() {\n\t    this.loadmess_01_message_bang();\n\t}\n\tsnapshot_05_out_set(v) {\n\t    this.snapshot_05_out = v;\n\t\n\t    {\n\t        let converted = [v];\n\t        this.join_01_in4_set(converted);\n\t    }\n\t}\n\tmetro_01_tick_bang() {\n\t    this.metro_01_tickout_bang();\n\t    this.getEngine().flushClockEvents(this, -871550838, false);;\n\t\n\t    if ((this.metro_01_on)) {\n\t        {\n\t            this.getEngine().scheduleClockEvent(this, -871550838, this.metro_01_interval + this._currentTime);;\n\t        }\n\t    }\n\t}\n\texpr_08_in1_bang() {\n\t    this.expr_08_out1_set(7 / 8);//#map:expr_obj-94:1\n\t}\n\tloadbang_01_startupbang_bang() {\n\t    this.loadbang_01_output_bang();\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    RNBO_UNUSED(numInputs);\n\t    RNBO_UNUSED(inputs);\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.p_01_perform(this.signals[0], n);\n\t    this.phasor_01_perform(this.phasor_01_freq, this.signals[1], n);\n\t    this.rate_tilde_03_perform(this.signals[1], this.rate_tilde_03_multiplier, this.signals[2], n);\n\t    this.snapshot_04_perform(this.signals[2], n);\n\t    this.delta_tilde_04_perform(this.signals[2], this.signals[3], n);\n\t    this.dspexpr_10_perform(this.signals[3], this.dspexpr_10_in2, this.signals[2], n);\n\t    this.edge_04_perform(this.signals[2], n);\n\t    this.rate_tilde_02_perform(this.signals[1], this.rate_tilde_02_multiplier, this.signals[2], n);\n\t    this.snapshot_03_perform(this.signals[2], n);\n\t    this.delta_tilde_03_perform(this.signals[2], this.signals[3], n);\n\t    this.dspexpr_09_perform(this.signals[3], this.dspexpr_09_in2, this.signals[2], n);\n\t    this.edge_03_perform(this.signals[2], n);\n\t    this.rate_tilde_01_perform(this.signals[1], this.rate_tilde_01_multiplier, this.signals[2], n);\n\t    this.snapshot_02_perform(this.signals[2], n);\n\t    this.delta_tilde_02_perform(this.signals[2], this.signals[3], n);\n\t    this.dspexpr_08_perform(this.signals[3], this.dspexpr_08_in2, this.signals[2], n);\n\t    this.edge_02_perform(this.signals[2], n);\n\t    this.rate_tilde_04_perform(this.signals[1], this.rate_tilde_04_multiplier, this.signals[2], n);\n\t    this.delta_tilde_05_perform(this.signals[2], this.signals[3], n);\n\t    this.dspexpr_11_perform(this.signals[3], this.dspexpr_11_in2, this.signals[4], n);\n\t    this.edge_05_perform(this.signals[4], n);\n\t    this.snapshot_05_perform(this.signals[2], n);\n\t    this.snapshot_01_perform(this.signals[1], n);\n\t    this.delta_tilde_01_perform(this.signals[1], this.signals[2], n);\n\t    this.dspexpr_07_perform(this.signals[2], this.dspexpr_07_in2, this.signals[1], n);\n\t    this.edge_01_perform(this.signals[1], n);\n\t    this.p_02_perform(this.signals[1], n);\n\t    this.p_03_perform(n);\n\t    this.p_04_perform(this.signals[2], n);\n\t    this.p_05_perform(n);\n\t    this.p_06_perform(this.signals[4], n);\n\t    this.p_07_perform(n);\n\t    this.p_08_perform(this.signals[3], n);\n\t\n\t    this.signaladder_01_perform(\n\t        this.signals[0],\n\t        this.signals[4],\n\t        this.signals[2],\n\t        this.signals[1],\n\t        this.signals[3],\n\t        this.signals[3],\n\t        n\n\t    );\n\t\n\t    this.dspexpr_06_perform(this.signals[3], this.dspexpr_06_in2, out1, n);\n\t    this.p_09_perform(n);\n\t    this.stackprotect_perform(n);\n\t    this.globaltransport_advance();\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sampleRate, maxBlockSize, force) {\n\t    if (this.maxvs < maxBlockSize || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 5; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxBlockSize);\n\t        }\n\t\n\t        this.phasor_01_sigbuf = resizeSignal(this.phasor_01_sigbuf, this.maxvs, maxBlockSize);\n\t        this.globaltransport_tempo = resizeSignal(this.globaltransport_tempo, this.maxvs, maxBlockSize);\n\t        this.globaltransport_state = resizeSignal(this.globaltransport_state, this.maxvs, maxBlockSize);\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxBlockSize);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxBlockSize);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sampleRate != this.sr;\n\t    var maxvsChanged = maxBlockSize != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged || force;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxBlockSize;\n\t        this.maxvs = maxBlockSize;\n\t        this.sr = sampleRate;\n\t        this.invsr = 1 / sampleRate;\n\t    }\n\t\n\t    this.phasor_01_dspsetup(forceDSPSetup);\n\t    this.rate_tilde_03_dspsetup(forceDSPSetup);\n\t    this.delta_tilde_04_dspsetup(forceDSPSetup);\n\t    this.edge_04_dspsetup(forceDSPSetup);\n\t    this.rate_tilde_02_dspsetup(forceDSPSetup);\n\t    this.delta_tilde_03_dspsetup(forceDSPSetup);\n\t    this.edge_03_dspsetup(forceDSPSetup);\n\t    this.rate_tilde_01_dspsetup(forceDSPSetup);\n\t    this.delta_tilde_02_dspsetup(forceDSPSetup);\n\t    this.edge_02_dspsetup(forceDSPSetup);\n\t    this.rate_tilde_04_dspsetup(forceDSPSetup);\n\t    this.delta_tilde_05_dspsetup(forceDSPSetup);\n\t    this.edge_05_dspsetup(forceDSPSetup);\n\t    this.delta_tilde_01_dspsetup(forceDSPSetup);\n\t    this.edge_01_dspsetup(forceDSPSetup);\n\t    this.globaltransport_dspsetup(forceDSPSetup);\n\t    this.p_01.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_02.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_03.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_04.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_05.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_06.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_07.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_08.prepareToProcess(sampleRate, maxBlockSize, force);\n\t    this.p_09.prepareToProcess(sampleRate, maxBlockSize, force);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sampleRate);\n\t}\n\tmsToSamps(ms, sampleRate) {\n\t    return ms * sampleRate * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    RNBO_UNUSED(outletId);\n\t    return 0;\n\t}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return addressOf(this.RNBODefaultSinus);\n\t        break;\n\t    default:\n\t        return null;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 1;\n\t}\n\tfillRNBODefaultSinus(ref) {\n\t    var buffer;\n\t    buffer = new Float64Buffer(ref);\n\t    let bufsize = buffer.getSize();\n\t\n\t    for (let i = 0; i < bufsize; i++) {\n\t        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);\n\t    }\n\t}\n\tfillDataRef(index, ref) {\n\t    switch (index) {\n\t    case 0:\n\t        this.fillRNBODefaultSinus(ref);\n\t        break;\n\t    }\n\t}\n\tprocessDataViewUpdate(index, time) {\n\t    this.p_01.processDataViewUpdate(index, time);\n\t    this.p_02.processDataViewUpdate(index, time);\n\t    this.p_03.processDataViewUpdate(index, time);\n\t    this.p_04.processDataViewUpdate(index, time);\n\t    this.p_05.processDataViewUpdate(index, time);\n\t    this.p_06.processDataViewUpdate(index, time);\n\t    this.p_07.processDataViewUpdate(index, time);\n\t    this.p_08.processDataViewUpdate(index, time);\n\t    this.p_09.processDataViewUpdate(index, time);\n\t}\n\tallocateDataRefs() {\n\t    this.p_01.allocateDataRefs();\n\t    this.p_02.allocateDataRefs();\n\t    this.p_03.allocateDataRefs();\n\t    this.p_04.allocateDataRefs();\n\t    this.p_05.allocateDataRefs();\n\t    this.p_06.allocateDataRefs();\n\t    this.p_07.allocateDataRefs();\n\t    this.p_08.allocateDataRefs();\n\t    this.p_09.allocateDataRefs();\n\t\n\t    if (this.RNBODefaultSinus.hasRequestedSize()) {\n\t        if (this.RNBODefaultSinus.wantsFill())\n\t            this.fillRNBODefaultSinus(this.RNBODefaultSinus);\n\t\n\t        this.getEngine().sendDataRefUpdated(0);\n\t    }\n\t}\n\tinitialize() {\n\t    this.RNBODefaultSinus = initDataRef(\"RNBODefaultSinus\", true, null);\n\t    this.assign_defaults();\n\t    this.setState();\n\t    this.RNBODefaultSinus.setIndex(0);\n\t    this.initializeObjects();\n\t    this.allocateDataRefs();\n\t    this.startup();\n\t}\n\tinitializeObjects() {\n\t    this.p_01.initializeObjects();\n\t    this.p_02.initializeObjects();\n\t    this.p_03.initializeObjects();\n\t    this.p_04.initializeObjects();\n\t    this.p_05.initializeObjects();\n\t    this.p_06.initializeObjects();\n\t    this.p_07.initializeObjects();\n\t    this.p_08.initializeObjects();\n\t    this.p_09.initializeObjects();\n\t}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 0;\n\t}\n\tgetState(state) {}\n\tsetState() {\n\t    this.p_01 = new RNBOSubpatcher_1093();\n\t    this.p_01.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_01.initialize();\n\t    this.p_01.setParameterOffset(this.getParameterOffset(this.p_01));\n\t    this.p_02 = new RNBOSubpatcher_1094();\n\t    this.p_02.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_02.initialize();\n\t    this.p_02.setParameterOffset(this.getParameterOffset(this.p_02));\n\t    this.p_03 = new RNBOSubpatcher_1095();\n\t    this.p_03.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_03.initialize();\n\t    this.p_03.setParameterOffset(this.getParameterOffset(this.p_03));\n\t    this.p_04 = new RNBOSubpatcher_1096();\n\t    this.p_04.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_04.initialize();\n\t    this.p_04.setParameterOffset(this.getParameterOffset(this.p_04));\n\t    this.p_05 = new RNBOSubpatcher_1097();\n\t    this.p_05.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_05.initialize();\n\t    this.p_05.setParameterOffset(this.getParameterOffset(this.p_05));\n\t    this.p_06 = new RNBOSubpatcher_1098();\n\t    this.p_06.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_06.initialize();\n\t    this.p_06.setParameterOffset(this.getParameterOffset(this.p_06));\n\t    this.p_07 = new RNBOSubpatcher_1099();\n\t    this.p_07.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_07.initialize();\n\t    this.p_07.setParameterOffset(this.getParameterOffset(this.p_07));\n\t    this.p_08 = new RNBOSubpatcher_1100();\n\t    this.p_08.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_08.initialize();\n\t    this.p_08.setParameterOffset(this.getParameterOffset(this.p_08));\n\t    this.p_09 = new RNBOSubpatcher_1101();\n\t    this.p_09.setEngineAndPatcher(this.getEngine(), this);\n\t    this.p_09.initialize();\n\t    this.p_09.setParameterOffset(this.getParameterOffset(this.p_09));\n\t}\n\tgetPreset(preset) {\n\t    preset[\"__presetid\"] = \"rnbo\";\n\t    this.p_01.getPreset(getSubState(getSubState(preset, \"__sps\"), \"s\"));\n\t    this.p_02.getPreset(getSubState(getSubState(preset, \"__sps\"), \"s[1]\"));\n\t    this.p_03.getPreset(getSubState(getSubState(preset, \"__sps\"), \"denorm\"));\n\t    this.p_04.getPreset(getSubState(getSubState(preset, \"__sps\"), \"s[2]\"));\n\t    this.p_05.getPreset(getSubState(getSubState(preset, \"__sps\"), \"denorm[1]\"));\n\t    this.p_06.getPreset(getSubState(getSubState(preset, \"__sps\"), \"s[3]\"));\n\t    this.p_07.getPreset(getSubState(getSubState(preset, \"__sps\"), \"denorm[2]\"));\n\t    this.p_08.getPreset(getSubState(getSubState(preset, \"__sps\"), \"s[4]\"));\n\t    this.p_09.getPreset(getSubState(getSubState(preset, \"__sps\"), \"denorm[3]\"));\n\t}\n\tsetPreset(time, preset) {}\n\tprocessTempoEvent(time, tempo) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setTempo(tempo, false)) {\n\t        this.p_01.processTempoEvent(time, tempo);\n\t        this.p_02.processTempoEvent(time, tempo);\n\t        this.p_03.processTempoEvent(time, tempo);\n\t        this.p_04.processTempoEvent(time, tempo);\n\t        this.p_05.processTempoEvent(time, tempo);\n\t        this.p_06.processTempoEvent(time, tempo);\n\t        this.p_07.processTempoEvent(time, tempo);\n\t        this.p_08.processTempoEvent(time, tempo);\n\t        this.p_09.processTempoEvent(time, tempo);\n\t    }\n\t}\n\tprocessTransportEvent(time, state) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setState(state, false)) {\n\t        this.p_01.processTransportEvent(time, state);\n\t        this.p_02.processTransportEvent(time, state);\n\t        this.p_03.processTransportEvent(time, state);\n\t        this.p_04.processTransportEvent(time, state);\n\t        this.p_05.processTransportEvent(time, state);\n\t        this.p_06.processTransportEvent(time, state);\n\t        this.p_07.processTransportEvent(time, state);\n\t        this.p_08.processTransportEvent(time, state);\n\t        this.p_09.processTransportEvent(time, state);\n\t        this.metro_01_onTransportChanged(state);\n\t    }\n\t}\n\tprocessBeatTimeEvent(time, beattime) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setBeatTime(beattime, false)) {\n\t        this.p_01.processBeatTimeEvent(time, beattime);\n\t        this.p_02.processBeatTimeEvent(time, beattime);\n\t        this.p_03.processBeatTimeEvent(time, beattime);\n\t        this.p_04.processBeatTimeEvent(time, beattime);\n\t        this.p_05.processBeatTimeEvent(time, beattime);\n\t        this.p_06.processBeatTimeEvent(time, beattime);\n\t        this.p_07.processBeatTimeEvent(time, beattime);\n\t        this.p_08.processBeatTimeEvent(time, beattime);\n\t        this.p_09.processBeatTimeEvent(time, beattime);\n\t        this.metro_01_onBeatTimeChanged(beattime);\n\t    }\n\t}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setTimeSignature(numerator, denominator, false)) {\n\t        this.p_01.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_02.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_03.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_04.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_05.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_06.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_07.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_08.processTimeSignatureEvent(time, numerator, denominator);\n\t        this.p_09.processTimeSignatureEvent(time, numerator, denominator);\n\t    }\n\t}\n\tsetParameterValue(index, v, time) {\n\t    RNBO_UNUSED(v);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            this.p_01.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            this.p_02.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            this.p_03.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            this.p_04.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            this.p_05.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            this.p_06.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            this.p_07.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            this.p_08.setParameterValue(index, v, time);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            this.p_09.setParameterValue(index, v, time);\n\t\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            return this.p_01.getParameterValue(index);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            return this.p_02.getParameterValue(index);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            return this.p_03.getParameterValue(index);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            return this.p_04.getParameterValue(index);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            return this.p_05.getParameterValue(index);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            return this.p_06.getParameterValue(index);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            return this.p_07.getParameterValue(index);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            return this.p_08.getParameterValue(index);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            return this.p_09.getParameterValue(index);\n\t\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters();\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            return this.p_01.getParameterName(index);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            return this.p_02.getParameterName(index);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            return this.p_03.getParameterName(index);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            return this.p_04.getParameterName(index);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            return this.p_05.getParameterName(index);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            return this.p_06.getParameterName(index);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            return this.p_07.getParameterName(index);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            return this.p_08.getParameterName(index);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            return this.p_09.getParameterName(index);\n\t\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            return this.p_01.getParameterId(index);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            return this.p_02.getParameterId(index);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            return this.p_03.getParameterId(index);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            return this.p_04.getParameterId(index);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            return this.p_05.getParameterId(index);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            return this.p_06.getParameterId(index);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            return this.p_07.getParameterId(index);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            return this.p_08.getParameterId(index);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            return this.p_09.getParameterId(index);\n\t\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        default:\n\t            index -= 0;\n\t\n\t            if (index < this.p_01.getNumParameters())\n\t                this.p_01.getParameterInfo(index, info);\n\t\n\t            index -= this.p_01.getNumParameters();\n\t\n\t            if (index < this.p_02.getNumParameters())\n\t                this.p_02.getParameterInfo(index, info);\n\t\n\t            index -= this.p_02.getNumParameters();\n\t\n\t            if (index < this.p_03.getNumParameters())\n\t                this.p_03.getParameterInfo(index, info);\n\t\n\t            index -= this.p_03.getNumParameters();\n\t\n\t            if (index < this.p_04.getNumParameters())\n\t                this.p_04.getParameterInfo(index, info);\n\t\n\t            index -= this.p_04.getNumParameters();\n\t\n\t            if (index < this.p_05.getNumParameters())\n\t                this.p_05.getParameterInfo(index, info);\n\t\n\t            index -= this.p_05.getNumParameters();\n\t\n\t            if (index < this.p_06.getNumParameters())\n\t                this.p_06.getParameterInfo(index, info);\n\t\n\t            index -= this.p_06.getNumParameters();\n\t\n\t            if (index < this.p_07.getNumParameters())\n\t                this.p_07.getParameterInfo(index, info);\n\t\n\t            index -= this.p_07.getNumParameters();\n\t\n\t            if (index < this.p_08.getNumParameters())\n\t                this.p_08.getParameterInfo(index, info);\n\t\n\t            index -= this.p_08.getNumParameters();\n\t\n\t            if (index < this.p_09.getNumParameters())\n\t                this.p_09.getParameterInfo(index, info);\n\t\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index, ignoreValue) {\n\t    this.getEngine().notifyParameterValueChanged(index, (ignoreValue ? 0 : this.getParameterValue(index)), ignoreValue);\n\t}\n\tgetParameterOffset(subpatcher) {\n\t    if (subpatcher == this.p_01)\n\t        return 0;\n\t\n\t    if (subpatcher == this.p_02)\n\t        return 0 + this.p_01.getNumParameters();\n\t\n\t    if (subpatcher == this.p_03)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters();\n\t\n\t    if (subpatcher == this.p_04)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters();\n\t\n\t    if (subpatcher == this.p_05)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n\t\n\t    if (subpatcher == this.p_06)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters();\n\t\n\t    if (subpatcher == this.p_07)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters();\n\t\n\t    if (subpatcher == this.p_08)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters();\n\t\n\t    if (subpatcher == this.p_09)\n\t        return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters();\n\t\n\t    return 0;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            return this.p_01.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            return this.p_02.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            return this.p_03.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            return this.p_04.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            return this.p_05.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            return this.p_06.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            return this.p_07.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            return this.p_08.convertToNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            return this.p_09.convertToNormalizedParameterValue(index, value);\n\t\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\t\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.p_01.getNumParameters())\n\t            return this.p_01.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_01.getNumParameters();\n\t\n\t        if (index < this.p_02.getNumParameters())\n\t            return this.p_02.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_02.getNumParameters();\n\t\n\t        if (index < this.p_03.getNumParameters())\n\t            return this.p_03.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_03.getNumParameters();\n\t\n\t        if (index < this.p_04.getNumParameters())\n\t            return this.p_04.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_04.getNumParameters();\n\t\n\t        if (index < this.p_05.getNumParameters())\n\t            return this.p_05.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_05.getNumParameters();\n\t\n\t        if (index < this.p_06.getNumParameters())\n\t            return this.p_06.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_06.getNumParameters();\n\t\n\t        if (index < this.p_07.getNumParameters())\n\t            return this.p_07.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_07.getNumParameters();\n\t\n\t        if (index < this.p_08.getNumParameters())\n\t            return this.p_08.constrainParameterValue(index, value);\n\t\n\t        index -= this.p_08.getNumParameters();\n\t\n\t        if (index < this.p_09.getNumParameters())\n\t            return this.p_09.constrainParameterValue(index, value);\n\t\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.paramInitIndices.push(index);\n\t    this.paramInitOrder.push(order);\n\t}\n\tprocessParamInitEvents() {\n\t    this.listquicksort(\n\t        this.paramInitOrder,\n\t        this.paramInitIndices,\n\t        0,\n\t        (this.paramInitOrder.length - 1),\n\t        true\n\t    );\n\t\n\t    for (var i = 0; i < this.paramInitOrder.length; i++) {\n\t        this.getEngine().scheduleParameterChange(\n\t            this.paramInitIndices[i],\n\t            this.getParameterValue(this.paramInitIndices[i]),\n\t            0\n\t        );\n\t    }\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    RNBO_UNUSED(hasValue);\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case -1313779944:\n\t        this.edge_01_onout_bang();\n\t        break;\n\t    case 1151781846:\n\t        this.edge_01_offout_bang();\n\t        break;\n\t    case 1577528346:\n\t        this.edge_02_onout_bang();\n\t        break;\n\t    case -1966461100:\n\t        this.edge_02_offout_bang();\n\t        break;\n\t    case 875698843:\n\t        this.edge_03_onout_bang();\n\t        break;\n\t    case 769384723:\n\t        this.edge_03_offout_bang();\n\t        break;\n\t    case 173869340:\n\t        this.edge_04_onout_bang();\n\t        break;\n\t    case -789736750:\n\t        this.edge_04_offout_bang();\n\t        break;\n\t    case -527960163:\n\t        this.edge_05_onout_bang();\n\t        break;\n\t    case 1946109073:\n\t        this.edge_05_offout_bang();\n\t        break;\n\t    case -1245190316:\n\t        this.snapshot_01_out_set(value);\n\t        break;\n\t    case 113329909:\n\t        this.expr_05_in1_bang();\n\t        break;\n\t    case -105626027:\n\t        this.snapshot_02_out_set(value);\n\t        break;\n\t    case 1033938262:\n\t        this.snapshot_03_out_set(value);\n\t        break;\n\t    case 1252894198:\n\t        this.expr_06_in1_bang();\n\t        break;\n\t    case -2121464745:\n\t        this.snapshot_04_out_set(value);\n\t        break;\n\t    case 1144176827:\n\t        this.expr_07_in1_bang();\n\t        break;\n\t    case 29237386:\n\t        this.loadmess_01_startupbang_bang();\n\t        break;\n\t    case 879365773:\n\t        this.snapshot_05_out_set(value);\n\t        break;\n\t    case -871550838:\n\t        this.metro_01_tick_bang();\n\t        break;\n\t    case -871661891:\n\t        this.expr_08_in1_bang();\n\t        break;\n\t    case -871642103:\n\t        this.loadbang_01_startupbang_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {\n\t    RNBO_UNUSED(objectId);\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t    case TAG(\"rate\"):\n\t        this.inport_01_value_number_set(payload);\n\t        break;\n\t    case TAG(\"r1\"):\n\t        this.inport_02_value_number_set(payload);\n\t        break;\n\t    case TAG(\"r2\"):\n\t        this.inport_03_value_number_set(payload);\n\t        break;\n\t    case TAG(\"r3\"):\n\t        this.inport_04_value_number_set(payload);\n\t        break;\n\t    case TAG(\"r4\"):\n\t        this.inport_05_value_number_set(payload);\n\t        break;\n\t    }\n\t\n\t    this.p_01.processNumMessage(tag, objectId, time, payload);\n\t    this.p_02.processNumMessage(tag, objectId, time, payload);\n\t    this.p_03.processNumMessage(tag, objectId, time, payload);\n\t    this.p_04.processNumMessage(tag, objectId, time, payload);\n\t    this.p_05.processNumMessage(tag, objectId, time, payload);\n\t    this.p_06.processNumMessage(tag, objectId, time, payload);\n\t    this.p_07.processNumMessage(tag, objectId, time, payload);\n\t    this.p_08.processNumMessage(tag, objectId, time, payload);\n\t    this.p_09.processNumMessage(tag, objectId, time, payload);\n\t}\n\tprocessListMessage(tag, objectId, time, payload) {\n\t    RNBO_UNUSED(objectId);\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t    case TAG(\"rate\"):\n\t        this.inport_01_value_list_set(payload);\n\t        break;\n\t    case TAG(\"r1\"):\n\t        this.inport_02_value_list_set(payload);\n\t        break;\n\t    case TAG(\"r2\"):\n\t        this.inport_03_value_list_set(payload);\n\t        break;\n\t    case TAG(\"r3\"):\n\t        this.inport_04_value_list_set(payload);\n\t        break;\n\t    case TAG(\"r4\"):\n\t        this.inport_05_value_list_set(payload);\n\t        break;\n\t    }\n\t\n\t    this.p_01.processListMessage(tag, objectId, time, payload);\n\t    this.p_02.processListMessage(tag, objectId, time, payload);\n\t    this.p_03.processListMessage(tag, objectId, time, payload);\n\t    this.p_04.processListMessage(tag, objectId, time, payload);\n\t    this.p_05.processListMessage(tag, objectId, time, payload);\n\t    this.p_06.processListMessage(tag, objectId, time, payload);\n\t    this.p_07.processListMessage(tag, objectId, time, payload);\n\t    this.p_08.processListMessage(tag, objectId, time, payload);\n\t    this.p_09.processListMessage(tag, objectId, time, payload);\n\t}\n\tprocessBangMessage(tag, objectId, time) {\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t    case TAG(\"rate\"):\n\t        this.inport_01_value_bang_bang();\n\t        break;\n\t    case TAG(\"r1\"):\n\t        this.inport_02_value_bang_bang();\n\t        break;\n\t    case TAG(\"r2\"):\n\t        this.inport_03_value_bang_bang();\n\t        break;\n\t    case TAG(\"r3\"):\n\t        this.inport_04_value_bang_bang();\n\t        break;\n\t    case TAG(\"r4\"):\n\t        this.inport_05_value_bang_bang();\n\t        break;\n\t    case TAG(\"startupbang\"):\n\t        if (TAG(\"loadmess_obj-75\") == objectId)\n\t            this.loadmess_01_startupbang_bang();\n\t\n\t        if (TAG(\"loadbang_obj-101\") == objectId)\n\t            this.loadbang_01_startupbang_bang();\n\t\n\t        break;\n\t    }\n\t\n\t    this.p_01.processBangMessage(tag, objectId, time);\n\t    this.p_02.processBangMessage(tag, objectId, time);\n\t    this.p_03.processBangMessage(tag, objectId, time);\n\t    this.p_04.processBangMessage(tag, objectId, time);\n\t    this.p_05.processBangMessage(tag, objectId, time);\n\t    this.p_06.processBangMessage(tag, objectId, time);\n\t    this.p_07.processBangMessage(tag, objectId, time);\n\t    this.p_08.processBangMessage(tag, objectId, time);\n\t    this.p_09.processBangMessage(tag, objectId, time);\n\t}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t    case TAG(\"phasors\"):\n\t        return \"phasors\";\n\t    case TAG(\"\"):\n\t        return \"\";\n\t    case TAG(\"rate\"):\n\t        return \"rate\";\n\t    case TAG(\"r1\"):\n\t        return \"r1\";\n\t    case TAG(\"r2\"):\n\t        return \"r2\";\n\t    case TAG(\"r3\"):\n\t        return \"r3\";\n\t    case TAG(\"r4\"):\n\t        return \"r4\";\n\t    case TAG(\"startupbang\"):\n\t        return \"startupbang\";\n\t    case TAG(\"loadmess_obj-75\"):\n\t        return \"loadmess_obj-75\";\n\t    case TAG(\"loadbang_obj-101\"):\n\t        return \"loadbang_obj-101\";\n\t    }\n\t\n\t    var subpatchResult_0 = this.p_01.resolveTag(tag);\n\t\n\t    if (subpatchResult_0)\n\t        return subpatchResult_0;\n\t\n\t    var subpatchResult_1 = this.p_02.resolveTag(tag);\n\t\n\t    if (subpatchResult_1)\n\t        return subpatchResult_1;\n\t\n\t    var subpatchResult_2 = this.p_03.resolveTag(tag);\n\t\n\t    if (subpatchResult_2)\n\t        return subpatchResult_2;\n\t\n\t    var subpatchResult_3 = this.p_04.resolveTag(tag);\n\t\n\t    if (subpatchResult_3)\n\t        return subpatchResult_3;\n\t\n\t    var subpatchResult_4 = this.p_05.resolveTag(tag);\n\t\n\t    if (subpatchResult_4)\n\t        return subpatchResult_4;\n\t\n\t    var subpatchResult_5 = this.p_06.resolveTag(tag);\n\t\n\t    if (subpatchResult_5)\n\t        return subpatchResult_5;\n\t\n\t    var subpatchResult_6 = this.p_07.resolveTag(tag);\n\t\n\t    if (subpatchResult_6)\n\t        return subpatchResult_6;\n\t\n\t    var subpatchResult_7 = this.p_08.resolveTag(tag);\n\t\n\t    if (subpatchResult_7)\n\t        return subpatchResult_7;\n\t\n\t    var subpatchResult_8 = this.p_09.resolveTag(tag);\n\t\n\t    if (subpatchResult_8)\n\t        return subpatchResult_8;\n\t\n\t    return \"\";\n\t}\n\tgetNumMessages() {\n\t    return 6;\n\t}\n\tgetMessageInfo(index) {\n\t    switch (index) {\n\t    case 0:\n\t        var r0 = {\n\t            \"tag\": \"phasors\",\n\t            \"type\": Outport\n\t        };\n\t\n\t        return r0;\n\t    case 1:\n\t        var r1 = {\n\t            \"tag\": \"rate\",\n\t            \"type\": Inport\n\t        };\n\t\n\t        return r1;\n\t    case 2:\n\t        var r2 = {\n\t            \"tag\": \"r1\",\n\t            \"type\": Inport\n\t        };\n\t\n\t        return r2;\n\t    case 3:\n\t        var r3 = {\n\t            \"tag\": \"r2\",\n\t            \"type\": Inport\n\t        };\n\t\n\t        return r3;\n\t    case 4:\n\t        var r4 = {\n\t            \"tag\": \"r3\",\n\t            \"type\": Inport\n\t        };\n\t\n\t        return r4;\n\t    case 5:\n\t        var r5 = {\n\t            \"tag\": \"r4\",\n\t            \"type\": Inport\n\t        };\n\t\n\t        return r5;\n\t    }\n\t\n\t    return NullMessageInfo;\n\t}\n\tstartup() {\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    this.p_01.startup();\n\t    this.p_02.startup();\n\t    this.p_03.startup();\n\t    this.p_04.startup();\n\t    this.p_05.startup();\n\t    this.p_06.startup();\n\t    this.p_07.startup();\n\t    this.p_08.startup();\n\t    this.p_09.startup();\n\t    this.getEngine().scheduleClockEvent(this, 113329909, 0 + this._currentTime);;\n\t    this.getEngine().scheduleClockEvent(this, 1252894198, 0 + this._currentTime);;\n\t    this.getEngine().scheduleClockEvent(this, 1144176827, 0 + this._currentTime);;\n\t    this.getEngine().scheduleClockEvent(this, 29237386, 0 + this._currentTime);;\n\t\n\t    if ((this.metro_01_on))\n\t        this.metro_01_on_set(1);\n\t\n\t    this.getEngine().scheduleClockEvent(this, -871661891, 0 + this._currentTime);;\n\t    this.getEngine().scheduleClockEvent(this, -871642103, 0 + this._currentTime);;\n\t    this.processParamInitEvents();\n\t}\n\tinport_01_out_bang_bang() {}\n\tphasor_01_freq_set(v) {\n\t    this.phasor_01_freq = v;\n\t}\n\tinport_01_out_number_set(v) {\n\t    this.phasor_01_freq_set(v);\n\t}\n\tphasor_01_phase_set(v) {\n\t    if (v >= 0 && (this.phasor_01_sigbuf)) {\n\t        this.phasor_01_sigbuf[this.sampleOffsetIntoNextAudioBuffer] = v;\n\t    }\n\t}\n\tinport_01_out_list_set(v) {\n\t    {\n\t        if (v.length > 1)\n\t            this.phasor_01_phase_set(v[1]);\n\t\n\t        let converted = (v.length > 0 ? v[0] : 0);\n\t        this.phasor_01_freq_set(converted);\n\t    }\n\t}\n\tp_01_in1_bang_bang() {\n\t    this.p_01.updateTime(this._currentTime);\n\t    this.p_01.eventinlet_01_out1_bang_bang();\n\t}\n\tp_02_in1_bang_bang() {\n\t    this.p_02.updateTime(this._currentTime);\n\t    this.p_02.eventinlet_02_out1_bang_bang();\n\t}\n\trate_tilde_01_multiplier_set(v) {\n\t    this.rate_tilde_01_multiplier = v;\n\t}\n\tp_03_out1_number_set(v) {\n\t    this.rate_tilde_01_multiplier_set(v);\n\t}\n\tp_03_in1_bang_bang() {\n\t    this.p_03.updateTime(this._currentTime);\n\t    this.p_03.eventinlet_03_out1_bang_bang();\n\t}\n\tinport_02_out_bang_bang() {\n\t    this.p_03_in1_bang_bang();\n\t}\n\tp_03_in1_number_set(v) {\n\t    this.p_03.updateTime(this._currentTime);\n\t    this.p_03.eventinlet_03_out1_number_set(v);\n\t}\n\tinport_02_out_number_set(v) {\n\t    this.p_03_in1_number_set(v);\n\t}\n\tp_03_in1_list_set(v) {\n\t    this.p_03.updateTime(this._currentTime);\n\t    this.p_03.eventinlet_03_out1_list_set(v);\n\t}\n\tinport_02_out_list_set(v) {\n\t    this.p_03_in1_list_set(v);\n\t}\n\tp_04_in1_bang_bang() {\n\t    this.p_04.updateTime(this._currentTime);\n\t    this.p_04.eventinlet_04_out1_bang_bang();\n\t}\n\trate_tilde_02_multiplier_set(v) {\n\t    this.rate_tilde_02_multiplier = v;\n\t}\n\tp_05_out1_number_set(v) {\n\t    this.rate_tilde_02_multiplier_set(v);\n\t}\n\tp_05_in1_bang_bang() {\n\t    this.p_05.updateTime(this._currentTime);\n\t    this.p_05.eventinlet_05_out1_bang_bang();\n\t}\n\tinport_03_out_bang_bang() {\n\t    this.p_05_in1_bang_bang();\n\t}\n\tp_05_in1_number_set(v) {\n\t    this.p_05.updateTime(this._currentTime);\n\t    this.p_05.eventinlet_05_out1_number_set(v);\n\t}\n\tinport_03_out_number_set(v) {\n\t    this.p_05_in1_number_set(v);\n\t}\n\tp_05_in1_list_set(v) {\n\t    this.p_05.updateTime(this._currentTime);\n\t    this.p_05.eventinlet_05_out1_list_set(v);\n\t}\n\tinport_03_out_list_set(v) {\n\t    this.p_05_in1_list_set(v);\n\t}\n\tp_06_in1_bang_bang() {\n\t    this.p_06.updateTime(this._currentTime);\n\t    this.p_06.eventinlet_06_out1_bang_bang();\n\t}\n\trate_tilde_03_multiplier_set(v) {\n\t    this.rate_tilde_03_multiplier = v;\n\t}\n\tp_07_out1_number_set(v) {\n\t    this.rate_tilde_03_multiplier_set(v);\n\t}\n\tp_07_in1_bang_bang() {\n\t    this.p_07.updateTime(this._currentTime);\n\t    this.p_07.eventinlet_07_out1_bang_bang();\n\t}\n\tinport_04_out_bang_bang() {\n\t    this.p_07_in1_bang_bang();\n\t}\n\tp_07_in1_number_set(v) {\n\t    this.p_07.updateTime(this._currentTime);\n\t    this.p_07.eventinlet_07_out1_number_set(v);\n\t}\n\tinport_04_out_number_set(v) {\n\t    this.p_07_in1_number_set(v);\n\t}\n\tp_07_in1_list_set(v) {\n\t    this.p_07.updateTime(this._currentTime);\n\t    this.p_07.eventinlet_07_out1_list_set(v);\n\t}\n\tinport_04_out_list_set(v) {\n\t    this.p_07_in1_list_set(v);\n\t}\n\tp_08_in1_bang_bang() {\n\t    this.p_08.updateTime(this._currentTime);\n\t    this.p_08.eventinlet_08_out1_bang_bang();\n\t}\n\trate_tilde_04_multiplier_set(v) {\n\t    this.rate_tilde_04_multiplier = v;\n\t}\n\tp_09_out1_number_set(v) {\n\t    this.rate_tilde_04_multiplier_set(v);\n\t}\n\tp_09_in1_bang_bang() {\n\t    this.p_09.updateTime(this._currentTime);\n\t    this.p_09.eventinlet_09_out1_bang_bang();\n\t}\n\tinport_05_out_bang_bang() {\n\t    this.p_09_in1_bang_bang();\n\t}\n\tp_09_in1_number_set(v) {\n\t    this.p_09.updateTime(this._currentTime);\n\t    this.p_09.eventinlet_09_out1_number_set(v);\n\t}\n\tinport_05_out_number_set(v) {\n\t    this.p_09_in1_number_set(v);\n\t}\n\tp_09_in1_list_set(v) {\n\t    this.p_09.updateTime(this._currentTime);\n\t    this.p_09.eventinlet_09_out1_list_set(v);\n\t}\n\tinport_05_out_list_set(v) {\n\t    this.p_09_in1_list_set(v);\n\t}\n\tlistchange_01_compare_set(v) {\n\t    this.listchange_01_compare = jsCreateListCopy(v);\n\t}\n\tlistchange_01_changeflag_set(v) {}\n\toutport_01_input_list_set(v) {\n\t    this.getEngine().sendListMessage(TAG(\"phasors\"), TAG(\"\"), v, this._currentTime);\n\t}\n\tlistchange_01_out_set(v) {\n\t    this.outport_01_input_list_set(v);\n\t}\n\tlistchange_01_input_set(v) {\n\t    this.listchange_01_input = jsCreateListCopy(v);\n\t    var changed = false;\n\t\n\t    if (v.length != this.listchange_01_compare.length) {\n\t        changed = true;\n\t    } else {\n\t        for (var i = 0; i < v.length; i++) {\n\t            if (v[i] != this.listchange_01_compare[i]) {\n\t                changed = true;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.listchange_01_compare_set(v);\n\t\n\t    if ((changed)) {\n\t        this.listchange_01_changeflag_set(1);\n\t        this.listchange_01_out_set(v);\n\t    } else {\n\t        this.listchange_01_changeflag_set(0);\n\t    }\n\t}\n\tjoin_01_out_set(v) {\n\t    this.listchange_01_input_set(v);\n\t}\n\tjoin_01_in0_set(v) {\n\t    this.join_01_in0 = jsCreateListCopy(v);\n\t    var l = list();\n\t    l = this.join_01_in0;\n\t    l = this.append(l, this.join_01_in1);\n\t    l = this.append(l, this.join_01_in2);\n\t    l = this.append(l, this.join_01_in3);\n\t    l = this.append(l, this.join_01_in4);\n\t\n\t    if (l.length > 0)\n\t        this.join_01_out_set(l);\n\t}\n\texpr_05_out1_set(v) {\n\t    this.expr_05_out1 = v;\n\t    this.rate_tilde_01_multiplier_set(this.expr_05_out1);\n\t}\n\tjoin_01_in1_set(v) {\n\t    this.join_01_in1 = jsCreateListCopy(v);\n\t    var l = list();\n\t    l = this.join_01_in0;\n\t    l = this.append(l, this.join_01_in1);\n\t    l = this.append(l, this.join_01_in2);\n\t    l = this.append(l, this.join_01_in3);\n\t    l = this.append(l, this.join_01_in4);\n\t\n\t    if (l.length > 0)\n\t        this.join_01_out_set(l);\n\t}\n\tjoin_01_in2_set(v) {\n\t    this.join_01_in2 = jsCreateListCopy(v);\n\t    var l = list();\n\t    l = this.join_01_in0;\n\t    l = this.append(l, this.join_01_in1);\n\t    l = this.append(l, this.join_01_in2);\n\t    l = this.append(l, this.join_01_in3);\n\t    l = this.append(l, this.join_01_in4);\n\t\n\t    if (l.length > 0)\n\t        this.join_01_out_set(l);\n\t}\n\texpr_06_out1_set(v) {\n\t    this.expr_06_out1 = v;\n\t    this.rate_tilde_02_multiplier_set(this.expr_06_out1);\n\t}\n\tjoin_01_in3_set(v) {\n\t    this.join_01_in3 = jsCreateListCopy(v);\n\t    var l = list();\n\t    l = this.join_01_in0;\n\t    l = this.append(l, this.join_01_in1);\n\t    l = this.append(l, this.join_01_in2);\n\t    l = this.append(l, this.join_01_in3);\n\t    l = this.append(l, this.join_01_in4);\n\t\n\t    if (l.length > 0)\n\t        this.join_01_out_set(l);\n\t}\n\texpr_07_out1_set(v) {\n\t    this.expr_07_out1 = v;\n\t    this.rate_tilde_03_multiplier_set(this.expr_07_out1);\n\t}\n\tmetro_01_on_set(v) {\n\t    this.metro_01_on = v;\n\t    this.getEngine().flushClockEvents(this, -871550838, false);;\n\t\n\t    if ((v)) {\n\t        {\n\t            this.getEngine().scheduleClockEvent(this, -871550838, 0 + this._currentTime);;\n\t        }\n\t    }\n\t}\n\tmetro_01_interval_set(v) {\n\t    this.metro_01_interval_setter(v);\n\t    v = this.metro_01_interval;\n\t}\n\tloadmess_01_message_bang() {\n\t    var v = this.loadmess_01_message;\n\t\n\t    {\n\t        if (v.length > 1)\n\t            this.metro_01_interval_set(v[1]);\n\t\n\t        let converted = (v.length > 0 ? v[0] : 0);\n\t        this.metro_01_on_set(converted);\n\t    }\n\t}\n\tjoin_01_in4_set(v) {\n\t    this.join_01_in4 = jsCreateListCopy(v);\n\t    var l = list();\n\t    l = this.join_01_in0;\n\t    l = this.append(l, this.join_01_in1);\n\t    l = this.append(l, this.join_01_in2);\n\t    l = this.append(l, this.join_01_in3);\n\t    l = this.append(l, this.join_01_in4);\n\t\n\t    if (l.length > 0)\n\t        this.join_01_out_set(l);\n\t}\n\tsnapshot_05_input_bang_bang() {\n\t    this.snapshot_05_out_set(this.snapshot_05_lastValue);\n\t}\n\tsnapshot_04_input_bang_bang() {\n\t    this.snapshot_04_out_set(this.snapshot_04_lastValue);\n\t}\n\tsnapshot_03_input_bang_bang() {\n\t    this.snapshot_03_out_set(this.snapshot_03_lastValue);\n\t}\n\tsnapshot_02_input_bang_bang() {\n\t    this.snapshot_02_out_set(this.snapshot_02_lastValue);\n\t}\n\tsnapshot_01_input_bang_bang() {\n\t    this.snapshot_01_out_set(this.snapshot_01_lastValue);\n\t}\n\tmetro_01_tickout_bang() {\n\t    this.snapshot_05_input_bang_bang();\n\t    this.snapshot_04_input_bang_bang();\n\t    this.snapshot_03_input_bang_bang();\n\t    this.snapshot_02_input_bang_bang();\n\t    this.snapshot_01_input_bang_bang();\n\t}\n\texpr_08_out1_set(v) {\n\t    this.expr_08_out1 = v;\n\t    this.rate_tilde_04_multiplier_set(this.expr_08_out1);\n\t}\n\tloadbang_01_output_bang() {\n\t    this.expr_08_in1_bang();\n\t    this.expr_07_in1_bang();\n\t    this.expr_06_in1_bang();\n\t    this.expr_05_in1_bang();\n\t}\n\tp_01_perform(out1, n) {\n\t    // subpatcher: s\n\t    var outs = [out1];\n\t\n\t    this.p_01.process(null, 0, outs, 1, n);\n\t}\n\tphasor_01_perform(freq, out, n) {\n\t    var __phasor_01_sigbuf = this.phasor_01_sigbuf;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        out[i] = this.phasor_01_ph_next(freq, -1);\n\t        __phasor_01_sigbuf[i] = -1;\n\t    }\n\t}\n\trate_tilde_03_perform(phase, multiplier, out1, n) {\n\t    var __rate_tilde_03_quant = this.rate_tilde_03_quant;\n\t    var __rate_tilde_03_currentPhase = this.rate_tilde_03_currentPhase;\n\t    var __rate_tilde_03_prev = this.rate_tilde_03_prev;\n\t    var __rate_tilde_03_diff = this.rate_tilde_03_diff;\n\t    var __rate_tilde_03_wantlock = this.rate_tilde_03_wantlock;\n\t    var __rate_tilde_03_invmult = this.rate_tilde_03_invmult;\n\t    var __rate_tilde_03_mult = this.rate_tilde_03_mult;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        if (multiplier != __rate_tilde_03_mult && (!(rnbo_isnan(multiplier)))) {\n\t            __rate_tilde_03_mult = multiplier;\n\t            __rate_tilde_03_invmult = this.safediv(1.0, __rate_tilde_03_mult);\n\t            __rate_tilde_03_wantlock = 1;\n\t        }\n\t\n\t        __rate_tilde_03_diff = phase[i] - __rate_tilde_03_prev;\n\t\n\t        if (__rate_tilde_03_diff < -0.5) {\n\t            __rate_tilde_03_diff += 1;\n\t        } else if (__rate_tilde_03_diff > 0.5) {\n\t            __rate_tilde_03_diff -= 1;\n\t        }\n\t\n\t        if ((__rate_tilde_03_wantlock)) {\n\t            __rate_tilde_03_currentPhase = (phase[i] - this.quantize(phase[i], __rate_tilde_03_quant)) * __rate_tilde_03_invmult + this.quantize(phase[i], __rate_tilde_03_quant * __rate_tilde_03_mult);\n\t            __rate_tilde_03_diff = 0;\n\t            __rate_tilde_03_wantlock = 0;\n\t        } else {\n\t            __rate_tilde_03_currentPhase += __rate_tilde_03_diff * __rate_tilde_03_invmult;\n\t        }\n\t\n\t        if (__rate_tilde_03_currentPhase > 1.0 || __rate_tilde_03_currentPhase < -0.0) {\n\t            __rate_tilde_03_currentPhase = __rate_tilde_03_currentPhase - rnbo_floor(__rate_tilde_03_currentPhase);\n\t        }\n\t\n\t        __rate_tilde_03_prev = phase[i];\n\t        out1[i] = __rate_tilde_03_currentPhase;\n\t        continue;\n\t    }\n\t\n\t    this.rate_tilde_03_mult = __rate_tilde_03_mult;\n\t    this.rate_tilde_03_invmult = __rate_tilde_03_invmult;\n\t    this.rate_tilde_03_wantlock = __rate_tilde_03_wantlock;\n\t    this.rate_tilde_03_diff = __rate_tilde_03_diff;\n\t    this.rate_tilde_03_prev = __rate_tilde_03_prev;\n\t    this.rate_tilde_03_currentPhase = __rate_tilde_03_currentPhase;\n\t}\n\tsnapshot_04_perform(input_signal, n) {\n\t    var __snapshot_04_lastValue = this.snapshot_04_lastValue;\n\t    var __snapshot_04_calc = this.snapshot_04_calc;\n\t    var __snapshot_04_count = this.snapshot_04_count;\n\t    var __snapshot_04_nextTime = this.snapshot_04_nextTime;\n\t    var __snapshot_04_interval = this.snapshot_04_interval;\n\t    var timeInSamples = this.msToSamps(__snapshot_04_interval, this.sr);\n\t\n\t    if (__snapshot_04_interval > 0) {\n\t        for (var i = 0; i < n; i++) {\n\t            if (__snapshot_04_nextTime <= __snapshot_04_count + (i)) {\n\t                {\n\t                    __snapshot_04_calc = input_signal[i];\n\t                }\n\t\n\t                this.getEngine().scheduleClockEventWithValue(\n\t                    this,\n\t                    -2121464745,\n\t                    this.sampsToMs((this.vs)) + this._currentTime,\n\t                    __snapshot_04_calc\n\t                );;\n\t\n\t                __snapshot_04_calc = 0;\n\t                __snapshot_04_nextTime += timeInSamples;\n\t            }\n\t        }\n\t\n\t        __snapshot_04_count += this.vs;\n\t    }\n\t\n\t    __snapshot_04_lastValue = input_signal[n - 1];\n\t    this.snapshot_04_nextTime = __snapshot_04_nextTime;\n\t    this.snapshot_04_count = __snapshot_04_count;\n\t    this.snapshot_04_calc = __snapshot_04_calc;\n\t    this.snapshot_04_lastValue = __snapshot_04_lastValue;\n\t}\n\tdelta_tilde_04_perform(x, out1, n) {\n\t    var __delta_tilde_04_prev = this.delta_tilde_04_prev;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        var temp = (x[i] - __delta_tilde_04_prev);\n\t        __delta_tilde_04_prev = x[i];\n\t        out1[i] = temp;\n\t    }\n\t\n\t    this.delta_tilde_04_prev = __delta_tilde_04_prev;\n\t}\n\tdspexpr_10_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] < -0.5;//#map:_###_obj_###_:1\n\t    }\n\t}\n\tedge_04_perform(input, n) {\n\t    var __edge_04_currentState = this.edge_04_currentState;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        if (__edge_04_currentState == 1) {\n\t            if (input[i] == 0.) {\n\t                this.getEngine().scheduleClockEvent(this, -789736750, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_04_currentState = 0;\n\t            }\n\t        } else {\n\t            if (input[i] != 0.) {\n\t                this.getEngine().scheduleClockEvent(this, 173869340, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_04_currentState = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.edge_04_currentState = __edge_04_currentState;\n\t}\n\trate_tilde_02_perform(phase, multiplier, out1, n) {\n\t    var __rate_tilde_02_quant = this.rate_tilde_02_quant;\n\t    var __rate_tilde_02_currentPhase = this.rate_tilde_02_currentPhase;\n\t    var __rate_tilde_02_prev = this.rate_tilde_02_prev;\n\t    var __rate_tilde_02_diff = this.rate_tilde_02_diff;\n\t    var __rate_tilde_02_wantlock = this.rate_tilde_02_wantlock;\n\t    var __rate_tilde_02_invmult = this.rate_tilde_02_invmult;\n\t    var __rate_tilde_02_mult = this.rate_tilde_02_mult;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        if (multiplier != __rate_tilde_02_mult && (!(rnbo_isnan(multiplier)))) {\n\t            __rate_tilde_02_mult = multiplier;\n\t            __rate_tilde_02_invmult = this.safediv(1.0, __rate_tilde_02_mult);\n\t            __rate_tilde_02_wantlock = 1;\n\t        }\n\t\n\t        __rate_tilde_02_diff = phase[i] - __rate_tilde_02_prev;\n\t\n\t        if (__rate_tilde_02_diff < -0.5) {\n\t            __rate_tilde_02_diff += 1;\n\t        } else if (__rate_tilde_02_diff > 0.5) {\n\t            __rate_tilde_02_diff -= 1;\n\t        }\n\t\n\t        if ((__rate_tilde_02_wantlock)) {\n\t            __rate_tilde_02_currentPhase = (phase[i] - this.quantize(phase[i], __rate_tilde_02_quant)) * __rate_tilde_02_invmult + this.quantize(phase[i], __rate_tilde_02_quant * __rate_tilde_02_mult);\n\t            __rate_tilde_02_diff = 0;\n\t            __rate_tilde_02_wantlock = 0;\n\t        } else {\n\t            __rate_tilde_02_currentPhase += __rate_tilde_02_diff * __rate_tilde_02_invmult;\n\t        }\n\t\n\t        if (__rate_tilde_02_currentPhase > 1.0 || __rate_tilde_02_currentPhase < -0.0) {\n\t            __rate_tilde_02_currentPhase = __rate_tilde_02_currentPhase - rnbo_floor(__rate_tilde_02_currentPhase);\n\t        }\n\t\n\t        __rate_tilde_02_prev = phase[i];\n\t        out1[i] = __rate_tilde_02_currentPhase;\n\t        continue;\n\t    }\n\t\n\t    this.rate_tilde_02_mult = __rate_tilde_02_mult;\n\t    this.rate_tilde_02_invmult = __rate_tilde_02_invmult;\n\t    this.rate_tilde_02_wantlock = __rate_tilde_02_wantlock;\n\t    this.rate_tilde_02_diff = __rate_tilde_02_diff;\n\t    this.rate_tilde_02_prev = __rate_tilde_02_prev;\n\t    this.rate_tilde_02_currentPhase = __rate_tilde_02_currentPhase;\n\t}\n\tsnapshot_03_perform(input_signal, n) {\n\t    var __snapshot_03_lastValue = this.snapshot_03_lastValue;\n\t    var __snapshot_03_calc = this.snapshot_03_calc;\n\t    var __snapshot_03_count = this.snapshot_03_count;\n\t    var __snapshot_03_nextTime = this.snapshot_03_nextTime;\n\t    var __snapshot_03_interval = this.snapshot_03_interval;\n\t    var timeInSamples = this.msToSamps(__snapshot_03_interval, this.sr);\n\t\n\t    if (__snapshot_03_interval > 0) {\n\t        for (var i = 0; i < n; i++) {\n\t            if (__snapshot_03_nextTime <= __snapshot_03_count + (i)) {\n\t                {\n\t                    __snapshot_03_calc = input_signal[i];\n\t                }\n\t\n\t                this.getEngine().scheduleClockEventWithValue(\n\t                    this,\n\t                    1033938262,\n\t                    this.sampsToMs((this.vs)) + this._currentTime,\n\t                    __snapshot_03_calc\n\t                );;\n\t\n\t                __snapshot_03_calc = 0;\n\t                __snapshot_03_nextTime += timeInSamples;\n\t            }\n\t        }\n\t\n\t        __snapshot_03_count += this.vs;\n\t    }\n\t\n\t    __snapshot_03_lastValue = input_signal[n - 1];\n\t    this.snapshot_03_nextTime = __snapshot_03_nextTime;\n\t    this.snapshot_03_count = __snapshot_03_count;\n\t    this.snapshot_03_calc = __snapshot_03_calc;\n\t    this.snapshot_03_lastValue = __snapshot_03_lastValue;\n\t}\n\tdelta_tilde_03_perform(x, out1, n) {\n\t    var __delta_tilde_03_prev = this.delta_tilde_03_prev;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        var temp = (x[i] - __delta_tilde_03_prev);\n\t        __delta_tilde_03_prev = x[i];\n\t        out1[i] = temp;\n\t    }\n\t\n\t    this.delta_tilde_03_prev = __delta_tilde_03_prev;\n\t}\n\tdspexpr_09_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] < -0.5;//#map:_###_obj_###_:1\n\t    }\n\t}\n\tedge_03_perform(input, n) {\n\t    var __edge_03_currentState = this.edge_03_currentState;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        if (__edge_03_currentState == 1) {\n\t            if (input[i] == 0.) {\n\t                this.getEngine().scheduleClockEvent(this, 769384723, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_03_currentState = 0;\n\t            }\n\t        } else {\n\t            if (input[i] != 0.) {\n\t                this.getEngine().scheduleClockEvent(this, 875698843, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_03_currentState = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.edge_03_currentState = __edge_03_currentState;\n\t}\n\trate_tilde_01_perform(phase, multiplier, out1, n) {\n\t    var __rate_tilde_01_quant = this.rate_tilde_01_quant;\n\t    var __rate_tilde_01_currentPhase = this.rate_tilde_01_currentPhase;\n\t    var __rate_tilde_01_prev = this.rate_tilde_01_prev;\n\t    var __rate_tilde_01_diff = this.rate_tilde_01_diff;\n\t    var __rate_tilde_01_wantlock = this.rate_tilde_01_wantlock;\n\t    var __rate_tilde_01_invmult = this.rate_tilde_01_invmult;\n\t    var __rate_tilde_01_mult = this.rate_tilde_01_mult;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        if (multiplier != __rate_tilde_01_mult && (!(rnbo_isnan(multiplier)))) {\n\t            __rate_tilde_01_mult = multiplier;\n\t            __rate_tilde_01_invmult = this.safediv(1.0, __rate_tilde_01_mult);\n\t            __rate_tilde_01_wantlock = 1;\n\t        }\n\t\n\t        __rate_tilde_01_diff = phase[i] - __rate_tilde_01_prev;\n\t\n\t        if (__rate_tilde_01_diff < -0.5) {\n\t            __rate_tilde_01_diff += 1;\n\t        } else if (__rate_tilde_01_diff > 0.5) {\n\t            __rate_tilde_01_diff -= 1;\n\t        }\n\t\n\t        if ((__rate_tilde_01_wantlock)) {\n\t            __rate_tilde_01_currentPhase = (phase[i] - this.quantize(phase[i], __rate_tilde_01_quant)) * __rate_tilde_01_invmult + this.quantize(phase[i], __rate_tilde_01_quant * __rate_tilde_01_mult);\n\t            __rate_tilde_01_diff = 0;\n\t            __rate_tilde_01_wantlock = 0;\n\t        } else {\n\t            __rate_tilde_01_currentPhase += __rate_tilde_01_diff * __rate_tilde_01_invmult;\n\t        }\n\t\n\t        if (__rate_tilde_01_currentPhase > 1.0 || __rate_tilde_01_currentPhase < -0.0) {\n\t            __rate_tilde_01_currentPhase = __rate_tilde_01_currentPhase - rnbo_floor(__rate_tilde_01_currentPhase);\n\t        }\n\t\n\t        __rate_tilde_01_prev = phase[i];\n\t        out1[i] = __rate_tilde_01_currentPhase;\n\t        continue;\n\t    }\n\t\n\t    this.rate_tilde_01_mult = __rate_tilde_01_mult;\n\t    this.rate_tilde_01_invmult = __rate_tilde_01_invmult;\n\t    this.rate_tilde_01_wantlock = __rate_tilde_01_wantlock;\n\t    this.rate_tilde_01_diff = __rate_tilde_01_diff;\n\t    this.rate_tilde_01_prev = __rate_tilde_01_prev;\n\t    this.rate_tilde_01_currentPhase = __rate_tilde_01_currentPhase;\n\t}\n\tsnapshot_02_perform(input_signal, n) {\n\t    var __snapshot_02_lastValue = this.snapshot_02_lastValue;\n\t    var __snapshot_02_calc = this.snapshot_02_calc;\n\t    var __snapshot_02_count = this.snapshot_02_count;\n\t    var __snapshot_02_nextTime = this.snapshot_02_nextTime;\n\t    var __snapshot_02_interval = this.snapshot_02_interval;\n\t    var timeInSamples = this.msToSamps(__snapshot_02_interval, this.sr);\n\t\n\t    if (__snapshot_02_interval > 0) {\n\t        for (var i = 0; i < n; i++) {\n\t            if (__snapshot_02_nextTime <= __snapshot_02_count + (i)) {\n\t                {\n\t                    __snapshot_02_calc = input_signal[i];\n\t                }\n\t\n\t                this.getEngine().scheduleClockEventWithValue(\n\t                    this,\n\t                    -105626027,\n\t                    this.sampsToMs((this.vs)) + this._currentTime,\n\t                    __snapshot_02_calc\n\t                );;\n\t\n\t                __snapshot_02_calc = 0;\n\t                __snapshot_02_nextTime += timeInSamples;\n\t            }\n\t        }\n\t\n\t        __snapshot_02_count += this.vs;\n\t    }\n\t\n\t    __snapshot_02_lastValue = input_signal[n - 1];\n\t    this.snapshot_02_nextTime = __snapshot_02_nextTime;\n\t    this.snapshot_02_count = __snapshot_02_count;\n\t    this.snapshot_02_calc = __snapshot_02_calc;\n\t    this.snapshot_02_lastValue = __snapshot_02_lastValue;\n\t}\n\tdelta_tilde_02_perform(x, out1, n) {\n\t    var __delta_tilde_02_prev = this.delta_tilde_02_prev;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        var temp = (x[i] - __delta_tilde_02_prev);\n\t        __delta_tilde_02_prev = x[i];\n\t        out1[i] = temp;\n\t    }\n\t\n\t    this.delta_tilde_02_prev = __delta_tilde_02_prev;\n\t}\n\tdspexpr_08_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] < -0.5;//#map:_###_obj_###_:1\n\t    }\n\t}\n\tedge_02_perform(input, n) {\n\t    var __edge_02_currentState = this.edge_02_currentState;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        if (__edge_02_currentState == 1) {\n\t            if (input[i] == 0.) {\n\t                this.getEngine().scheduleClockEvent(this, -1966461100, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_02_currentState = 0;\n\t            }\n\t        } else {\n\t            if (input[i] != 0.) {\n\t                this.getEngine().scheduleClockEvent(this, 1577528346, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_02_currentState = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.edge_02_currentState = __edge_02_currentState;\n\t}\n\trate_tilde_04_perform(phase, multiplier, out1, n) {\n\t    var __rate_tilde_04_quant = this.rate_tilde_04_quant;\n\t    var __rate_tilde_04_currentPhase = this.rate_tilde_04_currentPhase;\n\t    var __rate_tilde_04_prev = this.rate_tilde_04_prev;\n\t    var __rate_tilde_04_diff = this.rate_tilde_04_diff;\n\t    var __rate_tilde_04_wantlock = this.rate_tilde_04_wantlock;\n\t    var __rate_tilde_04_invmult = this.rate_tilde_04_invmult;\n\t    var __rate_tilde_04_mult = this.rate_tilde_04_mult;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        if (multiplier != __rate_tilde_04_mult && (!(rnbo_isnan(multiplier)))) {\n\t            __rate_tilde_04_mult = multiplier;\n\t            __rate_tilde_04_invmult = this.safediv(1.0, __rate_tilde_04_mult);\n\t            __rate_tilde_04_wantlock = 1;\n\t        }\n\t\n\t        __rate_tilde_04_diff = phase[i] - __rate_tilde_04_prev;\n\t\n\t        if (__rate_tilde_04_diff < -0.5) {\n\t            __rate_tilde_04_diff += 1;\n\t        } else if (__rate_tilde_04_diff > 0.5) {\n\t            __rate_tilde_04_diff -= 1;\n\t        }\n\t\n\t        if ((__rate_tilde_04_wantlock)) {\n\t            __rate_tilde_04_currentPhase = (phase[i] - this.quantize(phase[i], __rate_tilde_04_quant)) * __rate_tilde_04_invmult + this.quantize(phase[i], __rate_tilde_04_quant * __rate_tilde_04_mult);\n\t            __rate_tilde_04_diff = 0;\n\t            __rate_tilde_04_wantlock = 0;\n\t        } else {\n\t            __rate_tilde_04_currentPhase += __rate_tilde_04_diff * __rate_tilde_04_invmult;\n\t        }\n\t\n\t        if (__rate_tilde_04_currentPhase > 1.0 || __rate_tilde_04_currentPhase < -0.0) {\n\t            __rate_tilde_04_currentPhase = __rate_tilde_04_currentPhase - rnbo_floor(__rate_tilde_04_currentPhase);\n\t        }\n\t\n\t        __rate_tilde_04_prev = phase[i];\n\t        out1[i] = __rate_tilde_04_currentPhase;\n\t        continue;\n\t    }\n\t\n\t    this.rate_tilde_04_mult = __rate_tilde_04_mult;\n\t    this.rate_tilde_04_invmult = __rate_tilde_04_invmult;\n\t    this.rate_tilde_04_wantlock = __rate_tilde_04_wantlock;\n\t    this.rate_tilde_04_diff = __rate_tilde_04_diff;\n\t    this.rate_tilde_04_prev = __rate_tilde_04_prev;\n\t    this.rate_tilde_04_currentPhase = __rate_tilde_04_currentPhase;\n\t}\n\tdelta_tilde_05_perform(x, out1, n) {\n\t    var __delta_tilde_05_prev = this.delta_tilde_05_prev;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        var temp = (x[i] - __delta_tilde_05_prev);\n\t        __delta_tilde_05_prev = x[i];\n\t        out1[i] = temp;\n\t    }\n\t\n\t    this.delta_tilde_05_prev = __delta_tilde_05_prev;\n\t}\n\tdspexpr_11_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] < -0.5;//#map:_###_obj_###_:1\n\t    }\n\t}\n\tedge_05_perform(input, n) {\n\t    var __edge_05_currentState = this.edge_05_currentState;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        if (__edge_05_currentState == 1) {\n\t            if (input[i] == 0.) {\n\t                this.getEngine().scheduleClockEvent(this, 1946109073, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_05_currentState = 0;\n\t            }\n\t        } else {\n\t            if (input[i] != 0.) {\n\t                this.getEngine().scheduleClockEvent(this, -527960163, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_05_currentState = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.edge_05_currentState = __edge_05_currentState;\n\t}\n\tsnapshot_05_perform(input_signal, n) {\n\t    var __snapshot_05_lastValue = this.snapshot_05_lastValue;\n\t    var __snapshot_05_calc = this.snapshot_05_calc;\n\t    var __snapshot_05_count = this.snapshot_05_count;\n\t    var __snapshot_05_nextTime = this.snapshot_05_nextTime;\n\t    var __snapshot_05_interval = this.snapshot_05_interval;\n\t    var timeInSamples = this.msToSamps(__snapshot_05_interval, this.sr);\n\t\n\t    if (__snapshot_05_interval > 0) {\n\t        for (var i = 0; i < n; i++) {\n\t            if (__snapshot_05_nextTime <= __snapshot_05_count + (i)) {\n\t                {\n\t                    __snapshot_05_calc = input_signal[i];\n\t                }\n\t\n\t                this.getEngine().scheduleClockEventWithValue(\n\t                    this,\n\t                    879365773,\n\t                    this.sampsToMs((this.vs)) + this._currentTime,\n\t                    __snapshot_05_calc\n\t                );;\n\t\n\t                __snapshot_05_calc = 0;\n\t                __snapshot_05_nextTime += timeInSamples;\n\t            }\n\t        }\n\t\n\t        __snapshot_05_count += this.vs;\n\t    }\n\t\n\t    __snapshot_05_lastValue = input_signal[n - 1];\n\t    this.snapshot_05_nextTime = __snapshot_05_nextTime;\n\t    this.snapshot_05_count = __snapshot_05_count;\n\t    this.snapshot_05_calc = __snapshot_05_calc;\n\t    this.snapshot_05_lastValue = __snapshot_05_lastValue;\n\t}\n\tsnapshot_01_perform(input_signal, n) {\n\t    var __snapshot_01_lastValue = this.snapshot_01_lastValue;\n\t    var __snapshot_01_calc = this.snapshot_01_calc;\n\t    var __snapshot_01_count = this.snapshot_01_count;\n\t    var __snapshot_01_nextTime = this.snapshot_01_nextTime;\n\t    var __snapshot_01_interval = this.snapshot_01_interval;\n\t    var timeInSamples = this.msToSamps(__snapshot_01_interval, this.sr);\n\t\n\t    if (__snapshot_01_interval > 0) {\n\t        for (var i = 0; i < n; i++) {\n\t            if (__snapshot_01_nextTime <= __snapshot_01_count + (i)) {\n\t                {\n\t                    __snapshot_01_calc = input_signal[i];\n\t                }\n\t\n\t                this.getEngine().scheduleClockEventWithValue(\n\t                    this,\n\t                    -1245190316,\n\t                    this.sampsToMs((this.vs)) + this._currentTime,\n\t                    __snapshot_01_calc\n\t                );;\n\t\n\t                __snapshot_01_calc = 0;\n\t                __snapshot_01_nextTime += timeInSamples;\n\t            }\n\t        }\n\t\n\t        __snapshot_01_count += this.vs;\n\t    }\n\t\n\t    __snapshot_01_lastValue = input_signal[n - 1];\n\t    this.snapshot_01_nextTime = __snapshot_01_nextTime;\n\t    this.snapshot_01_count = __snapshot_01_count;\n\t    this.snapshot_01_calc = __snapshot_01_calc;\n\t    this.snapshot_01_lastValue = __snapshot_01_lastValue;\n\t}\n\tdelta_tilde_01_perform(x, out1, n) {\n\t    var __delta_tilde_01_prev = this.delta_tilde_01_prev;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        var temp = (x[i] - __delta_tilde_01_prev);\n\t        __delta_tilde_01_prev = x[i];\n\t        out1[i] = temp;\n\t    }\n\t\n\t    this.delta_tilde_01_prev = __delta_tilde_01_prev;\n\t}\n\tdspexpr_07_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] < -0.5;//#map:_###_obj_###_:1\n\t    }\n\t}\n\tedge_01_perform(input, n) {\n\t    var __edge_01_currentState = this.edge_01_currentState;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        if (__edge_01_currentState == 1) {\n\t            if (input[i] == 0.) {\n\t                this.getEngine().scheduleClockEvent(this, 1151781846, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_01_currentState = 0;\n\t            }\n\t        } else {\n\t            if (input[i] != 0.) {\n\t                this.getEngine().scheduleClockEvent(this, -1313779944, this.sampsToMs(i) + this._currentTime);;\n\t                __edge_01_currentState = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.edge_01_currentState = __edge_01_currentState;\n\t}\n\tp_02_perform(out1, n) {\n\t    // subpatcher: s\n\t    var outs = [out1];\n\t\n\t    this.p_02.process(null, 0, outs, 1, n);\n\t}\n\tp_03_perform(n) {\n\t    // subpatcher: denorm\n\t    this.p_03.process(null, 0, null, 0, n);\n\t}\n\tp_04_perform(out1, n) {\n\t    // subpatcher: s\n\t    var outs = [out1];\n\t\n\t    this.p_04.process(null, 0, outs, 1, n);\n\t}\n\tp_05_perform(n) {\n\t    // subpatcher: denorm\n\t    this.p_05.process(null, 0, null, 0, n);\n\t}\n\tp_06_perform(out1, n) {\n\t    // subpatcher: s\n\t    var outs = [out1];\n\t\n\t    this.p_06.process(null, 0, outs, 1, n);\n\t}\n\tp_07_perform(n) {\n\t    // subpatcher: denorm\n\t    this.p_07.process(null, 0, null, 0, n);\n\t}\n\tp_08_perform(out1, n) {\n\t    // subpatcher: s\n\t    var outs = [out1];\n\t\n\t    this.p_08.process(null, 0, outs, 1, n);\n\t}\n\tsignaladder_01_perform(in1, in2, in3, in4, in5, out, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out[i] = in1[i] + in2[i] + in3[i] + in4[i] + in5[i];\n\t    }\n\t}\n\tdspexpr_06_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * 0.125;//#map:_###_obj_###_:1\n\t    }\n\t}\n\tp_09_perform(n) {\n\t    // subpatcher: denorm\n\t    this.p_09.process(null, 0, null, 0, n);\n\t}\n\tstackprotect_perform(n) {\n\t    var __stackprotect_count = this.stackprotect_count;\n\t    __stackprotect_count = 0;\n\t    this.stackprotect_count = __stackprotect_count;\n\t}\n\tmetro_01_interval_setter(v) {\n\t    this.metro_01_interval = (v > 0 ? v : 0);\n\t}\n\tedge_01_dspsetup(force) {\n\t    if ((this.edge_01_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.edge_01_setupDone = true;\n\t}\n\tphasor_01_ph_next(freq, reset) {\n\t    const pincr = freq * this.phasor_01_ph_conv;\n\t\n\t    if (this.phasor_01_ph_currentPhase < 0.)\n\t        this.phasor_01_ph_currentPhase = 1. + this.phasor_01_ph_currentPhase;\n\t\n\t    if (this.phasor_01_ph_currentPhase > 1.)\n\t        this.phasor_01_ph_currentPhase = this.phasor_01_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.phasor_01_ph_currentPhase;\n\t    this.phasor_01_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tphasor_01_ph_reset() {\n\t    this.phasor_01_ph_currentPhase = 0;\n\t}\n\tphasor_01_ph_dspsetup() {\n\t    this.phasor_01_ph_conv = 1 / this.sr;\n\t}\n\tphasor_01_dspsetup(force) {\n\t    if ((this.phasor_01_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.phasor_01_conv = 1 / this.samplerate();\n\t    this.phasor_01_setupDone = true;\n\t    this.phasor_01_ph_dspsetup();\n\t}\n\tdelta_tilde_01_reset() {\n\t    this.delta_tilde_01_prev = 0;\n\t}\n\tdelta_tilde_01_dspsetup(force) {\n\t    if ((this.delta_tilde_01_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.delta_tilde_01_reset();\n\t    this.delta_tilde_01_setupDone = true;\n\t}\n\tedge_02_dspsetup(force) {\n\t    if ((this.edge_02_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.edge_02_setupDone = true;\n\t}\n\tdelta_tilde_02_reset() {\n\t    this.delta_tilde_02_prev = 0;\n\t}\n\tdelta_tilde_02_dspsetup(force) {\n\t    if ((this.delta_tilde_02_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.delta_tilde_02_reset();\n\t    this.delta_tilde_02_setupDone = true;\n\t}\n\trate_tilde_01_reset() {\n\t    this.rate_tilde_01_currentPhase = 0;\n\t    this.rate_tilde_01_diff = 0;\n\t    this.rate_tilde_01_prev = 0;\n\t    this.rate_tilde_01_mult = 1;\n\t    this.rate_tilde_01_invmult = 1;\n\t    this.rate_tilde_01_wantlock = 1;\n\t    this.rate_tilde_01_quant = 1;\n\t}\n\trate_tilde_01_dspsetup(force) {\n\t    if ((this.rate_tilde_01_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.rate_tilde_01_reset();\n\t    this.rate_tilde_01_setupDone = true;\n\t}\n\tedge_03_dspsetup(force) {\n\t    if ((this.edge_03_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.edge_03_setupDone = true;\n\t}\n\tdelta_tilde_03_reset() {\n\t    this.delta_tilde_03_prev = 0;\n\t}\n\tdelta_tilde_03_dspsetup(force) {\n\t    if ((this.delta_tilde_03_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.delta_tilde_03_reset();\n\t    this.delta_tilde_03_setupDone = true;\n\t}\n\trate_tilde_02_reset() {\n\t    this.rate_tilde_02_currentPhase = 0;\n\t    this.rate_tilde_02_diff = 0;\n\t    this.rate_tilde_02_prev = 0;\n\t    this.rate_tilde_02_mult = 1;\n\t    this.rate_tilde_02_invmult = 1;\n\t    this.rate_tilde_02_wantlock = 1;\n\t    this.rate_tilde_02_quant = 1;\n\t}\n\trate_tilde_02_dspsetup(force) {\n\t    if ((this.rate_tilde_02_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.rate_tilde_02_reset();\n\t    this.rate_tilde_02_setupDone = true;\n\t}\n\tedge_04_dspsetup(force) {\n\t    if ((this.edge_04_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.edge_04_setupDone = true;\n\t}\n\tdelta_tilde_04_reset() {\n\t    this.delta_tilde_04_prev = 0;\n\t}\n\tdelta_tilde_04_dspsetup(force) {\n\t    if ((this.delta_tilde_04_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.delta_tilde_04_reset();\n\t    this.delta_tilde_04_setupDone = true;\n\t}\n\trate_tilde_03_reset() {\n\t    this.rate_tilde_03_currentPhase = 0;\n\t    this.rate_tilde_03_diff = 0;\n\t    this.rate_tilde_03_prev = 0;\n\t    this.rate_tilde_03_mult = 1;\n\t    this.rate_tilde_03_invmult = 1;\n\t    this.rate_tilde_03_wantlock = 1;\n\t    this.rate_tilde_03_quant = 1;\n\t}\n\trate_tilde_03_dspsetup(force) {\n\t    if ((this.rate_tilde_03_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.rate_tilde_03_reset();\n\t    this.rate_tilde_03_setupDone = true;\n\t}\n\tedge_05_dspsetup(force) {\n\t    if ((this.edge_05_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.edge_05_setupDone = true;\n\t}\n\tdelta_tilde_05_reset() {\n\t    this.delta_tilde_05_prev = 0;\n\t}\n\tdelta_tilde_05_dspsetup(force) {\n\t    if ((this.delta_tilde_05_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.delta_tilde_05_reset();\n\t    this.delta_tilde_05_setupDone = true;\n\t}\n\trate_tilde_04_reset() {\n\t    this.rate_tilde_04_currentPhase = 0;\n\t    this.rate_tilde_04_diff = 0;\n\t    this.rate_tilde_04_prev = 0;\n\t    this.rate_tilde_04_mult = 1;\n\t    this.rate_tilde_04_invmult = 1;\n\t    this.rate_tilde_04_wantlock = 1;\n\t    this.rate_tilde_04_quant = 1;\n\t}\n\trate_tilde_04_dspsetup(force) {\n\t    if ((this.rate_tilde_04_setupDone) && (!(force)))\n\t        return;\n\t\n\t    this.rate_tilde_04_reset();\n\t    this.rate_tilde_04_setupDone = true;\n\t}\n\tmetro_01_onTransportChanged(state) {}\n\tmetro_01_onBeatTimeChanged(beattime) {}\n\tglobaltransport_getTempoAtSample(sampleOffset) {\n\t    return (this.vs > 0 ? this.globaltransport_tempo[sampleOffset] : this.globaltransport_lastTempo);\n\t}\n\tglobaltransport_getTempo() {\n\t    return this.globaltransport_getTempoAtSample(this.sampleOffsetIntoNextAudioBuffer);\n\t}\n\tglobaltransport_getStateAtSample(sampleOffset) {\n\t    return (this.vs > 0 ? this.globaltransport_state[sampleOffset] : this.globaltransport_lastState);\n\t}\n\tglobaltransport_getState() {\n\t    return this.globaltransport_getStateAtSample(this.sampleOffsetIntoNextAudioBuffer);\n\t}\n\tglobaltransport_getBeatTimeAtMsTime(time) {\n\t    var i = 2;\n\t\n\t    while (i < this.globaltransport_beatTimeChanges.length && this.globaltransport_beatTimeChanges[i + 1] <= time) {\n\t        i += 2;\n\t    }\n\t\n\t    i -= 2;\n\t    var beatTimeBase = this.globaltransport_beatTimeChanges[i];\n\t\n\t    if (this.globaltransport_getState() == 0)\n\t        return beatTimeBase;\n\t\n\t    var beatTimeBaseMsTime = this.globaltransport_beatTimeChanges[i + 1];\n\t    var diff = time - beatTimeBaseMsTime;\n\t    return beatTimeBase + this.mstobeats(diff);\n\t}\n\tglobaltransport_setTempo(tempo, notify) {\n\t    if ((notify)) {\n\t        this.processTempoEvent(this.currenttime(), tempo);\n\t        this.globaltransport_notify = true;\n\t    } else if (this.globaltransport_getTempo() != tempo) {\n\t        const ct = this.currenttime();\n\t        this.globaltransport_beatTimeChanges.push(this.globaltransport_getBeatTimeAtMsTime(ct));\n\t        this.globaltransport_beatTimeChanges.push(ct);\n\t\n\t        fillSignal(\n\t            this.globaltransport_tempo,\n\t            this.vs,\n\t            tempo,\n\t            (this.sampleOffsetIntoNextAudioBuffer)\n\t        );\n\t\n\t        this.globaltransport_lastTempo = tempo;\n\t        this.globaltransport_tempoNeedsReset = true;\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tglobaltransport_getBeatTime() {\n\t    return this.globaltransport_getBeatTimeAtMsTime(this.currenttime());\n\t}\n\tglobaltransport_setState(state, notify) {\n\t    if ((notify)) {\n\t        this.processTransportEvent(this.currenttime(), TransportState(state));\n\t        this.globaltransport_notify = true;\n\t    } else if (this.globaltransport_getState() != state) {\n\t        fillSignal(\n\t            this.globaltransport_state,\n\t            this.vs,\n\t            state,\n\t            (this.sampleOffsetIntoNextAudioBuffer)\n\t        );\n\t\n\t        this.globaltransport_lastState = TransportState(state);\n\t        this.globaltransport_stateNeedsReset = true;\n\t\n\t        if (state == 0) {\n\t            this.globaltransport_beatTimeChanges.push(this.globaltransport_getBeatTime());\n\t            this.globaltransport_beatTimeChanges.push(this.currenttime());\n\t        }\n\t\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tglobaltransport_setBeatTime(beattime, notify) {\n\t    if ((notify)) {\n\t        this.processBeatTimeEvent(this.currenttime(), beattime);\n\t        this.globaltransport_notify = true;\n\t        return false;\n\t    } else {\n\t        var beatTimeHasChanged = false;\n\t        var oldBeatTime = (this.globaltransport_getBeatTime());\n\t        var newBeatTime = (beattime);\n\t\n\t        if (oldBeatTime != newBeatTime) {\n\t            beatTimeHasChanged = true;\n\t        }\n\t\n\t        this.globaltransport_beatTimeChanges.push(beattime);\n\t        this.globaltransport_beatTimeChanges.push(this.currenttime());\n\t        return beatTimeHasChanged;\n\t    }\n\t}\n\tglobaltransport_getBeatTimeAtSample(sampleOffset) {\n\t    var msOffset = this.sampstoms(sampleOffset);\n\t    return this.globaltransport_getBeatTimeAtMsTime(this.currenttime() + msOffset);\n\t}\n\tglobaltransport_getTimeSignatureAtMsTime(time) {\n\t    var i = 3;\n\t\n\t    while (i < this.globaltransport_timeSignatureChanges.length && this.globaltransport_timeSignatureChanges[i + 2] <= time) {\n\t        i += 3;\n\t    }\n\t\n\t    i -= 3;\n\t\n\t    return [\n\t        this.globaltransport_timeSignatureChanges[i],\n\t        this.globaltransport_timeSignatureChanges[i + 1]\n\t    ];\n\t}\n\tglobaltransport_getTimeSignature() {\n\t    return this.globaltransport_getTimeSignatureAtMsTime(this.currenttime());\n\t}\n\tglobaltransport_getTimeSignatureAtSample(sampleOffset) {\n\t    var msOffset = this.sampstoms(sampleOffset);\n\t    return this.globaltransport_getTimeSignatureAtMsTime(this.currenttime() + msOffset);\n\t}\n\tglobaltransport_setTimeSignature(numerator, denominator, notify) {\n\t    if ((notify)) {\n\t        this.processTimeSignatureEvent(this.currenttime(), (numerator), (denominator));\n\t        this.globaltransport_notify = true;\n\t    } else {\n\t        var currentSig = this.globaltransport_getTimeSignature();\n\t\n\t        if (currentSig[0] != numerator || currentSig[1] != denominator) {\n\t            this.globaltransport_timeSignatureChanges.push(numerator);\n\t            this.globaltransport_timeSignatureChanges.push(denominator);\n\t            this.globaltransport_timeSignatureChanges.push(this.currenttime());\n\t            return true;\n\t        }\n\t    }\n\t\n\t    return false;\n\t}\n\tglobaltransport_advance() {\n\t    if ((this.globaltransport_tempoNeedsReset)) {\n\t        fillSignal(this.globaltransport_tempo, this.vs, this.globaltransport_lastTempo);\n\t        this.globaltransport_tempoNeedsReset = false;\n\t\n\t        if ((this.globaltransport_notify)) {\n\t            this.getEngine().sendTempoEvent(this.globaltransport_lastTempo);\n\t        }\n\t    }\n\t\n\t    if ((this.globaltransport_stateNeedsReset)) {\n\t        fillSignal(this.globaltransport_state, this.vs, this.globaltransport_lastState);\n\t        this.globaltransport_stateNeedsReset = false;\n\t\n\t        if ((this.globaltransport_notify)) {\n\t            this.getEngine().sendTransportEvent(TransportState(this.globaltransport_lastState));\n\t        }\n\t    }\n\t\n\t    if (this.globaltransport_beatTimeChanges.length > 2) {\n\t        this.globaltransport_beatTimeChanges[0] = this.globaltransport_beatTimeChanges[this.globaltransport_beatTimeChanges.length - 2];\n\t        this.globaltransport_beatTimeChanges[1] = this.globaltransport_beatTimeChanges[this.globaltransport_beatTimeChanges.length - 1];\n\t        this.globaltransport_beatTimeChanges.length = 2;\n\t\n\t        if ((this.globaltransport_notify)) {\n\t            this.getEngine().sendBeatTimeEvent(this.globaltransport_beatTimeChanges[0]);\n\t        }\n\t    }\n\t\n\t    if (this.globaltransport_timeSignatureChanges.length > 3) {\n\t        this.globaltransport_timeSignatureChanges[0] = this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length - 3];\n\t        this.globaltransport_timeSignatureChanges[1] = this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length - 2];\n\t        this.globaltransport_timeSignatureChanges[2] = this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length - 1];\n\t        this.globaltransport_timeSignatureChanges.length = 3;\n\t\n\t        if ((this.globaltransport_notify)) {\n\t            this.getEngine().sendTimeSignatureEvent(\n\t                (this.globaltransport_timeSignatureChanges[0]),\n\t                (this.globaltransport_timeSignatureChanges[1])\n\t            );\n\t        }\n\t    }\n\t\n\t    this.globaltransport_notify = false;\n\t}\n\tglobaltransport_dspsetup(force) {\n\t    if ((this.globaltransport_setupDone) && (!(force)))\n\t        return;\n\t\n\t    fillSignal(this.globaltransport_tempo, this.vs, this.globaltransport_lastTempo);\n\t    this.globaltransport_tempoNeedsReset = false;\n\t    fillSignal(this.globaltransport_state, this.vs, this.globaltransport_lastState);\n\t    this.globaltransport_stateNeedsReset = false;\n\t    this.globaltransport_setupDone = true;\n\t}\n\tstackprotect_check() {\n\t    this.stackprotect_count++;\n\t\n\t    if (this.stackprotect_count > 128) {\n\t        console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\");\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tupdateTime(time) {\n\t    this._currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = (rnbo_fround(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr)));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= (this.vs))\n\t        this.sampleOffsetIntoNextAudioBuffer = (this.vs) - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this;\n\t}\n} // end class\n\nrnboObj = new RNBOPatcher();",
      "encoding": "utf-8",
      "type": "js"
    }
  ]
}